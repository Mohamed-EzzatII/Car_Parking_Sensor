
Mini_Project4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000029d4  00002a68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080007c  0080007c  00002a84  2**0
                  ALLOC
  3 .stab         0000210c  00000000  00000000  00002a84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f44  00000000  00000000  00004b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008f09  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a2ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ab5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b4 13 	call	0x2768	; 0x2768 <main>
      8a:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e7       	ldi	r26, 0x74	; 116
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9c 14 	jmp	0x2938	; 0x2938 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a8 14 	jmp	0x2950	; 0x2950 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a8 14 	jmp	0x2950	; 0x2950 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e7       	ldi	r24, 0x74	; 116
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9c 14 	jmp	0x2938	; 0x2938 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e7       	ldi	r22, 0x74	; 116
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a8 14 	jmp	0x2950	; 0x2950 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a8 14 	jmp	0x2950	; 0x2950 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a8 14 	jmp	0x2950	; 0x2950 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <GPIO_setupPinDirection>:
/*
 * Description :
 * A function to set pin direction if it was input pin or output pin
 */
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	27 97       	sbiw	r28, 0x07	; 7
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	6a 83       	std	Y+2, r22	; 0x02
     cb6:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num>PIN7_ID||pin_num<PIN0_ID)
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	88 30       	cpi	r24, 0x08	; 8
     cbc:	08 f0       	brcs	.+2      	; 0xcc0 <GPIO_setupPinDirection+0x22>
     cbe:	d2 c0       	rjmp	.+420    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
	{
		/*do noting*/
	}
	else{

		if(direction==PIN_OUTPUT)
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <GPIO_setupPinDirection+0x2a>
     cc6:	63 c0       	rjmp	.+198    	; 0xd8e <GPIO_setupPinDirection+0xf0>
		{
			switch(port_num)
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	3f 83       	std	Y+7, r19	; 0x07
     cd0:	2e 83       	std	Y+6, r18	; 0x06
     cd2:	8e 81       	ldd	r24, Y+6	; 0x06
     cd4:	9f 81       	ldd	r25, Y+7	; 0x07
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	91 05       	cpc	r25, r1
     cda:	e9 f0       	breq	.+58     	; 0xd16 <GPIO_setupPinDirection+0x78>
     cdc:	2e 81       	ldd	r18, Y+6	; 0x06
     cde:	3f 81       	ldd	r19, Y+7	; 0x07
     ce0:	22 30       	cpi	r18, 0x02	; 2
     ce2:	31 05       	cpc	r19, r1
     ce4:	61 f1       	breq	.+88     	; 0xd3e <GPIO_setupPinDirection+0xa0>
     ce6:	8e 81       	ldd	r24, Y+6	; 0x06
     ce8:	9f 81       	ldd	r25, Y+7	; 0x07
     cea:	00 97       	sbiw	r24, 0x00	; 0
     cec:	e1 f5       	brne	.+120    	; 0xd66 <GPIO_setupPinDirection+0xc8>
			{
			case PORTA_ID:
				DDRA|=(1<<pin_num);
     cee:	aa e3       	ldi	r26, 0x3A	; 58
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	ea e3       	ldi	r30, 0x3A	; 58
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	48 2f       	mov	r20, r24
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	02 2e       	mov	r0, r18
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <GPIO_setupPinDirection+0x6e>
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	0a 94       	dec	r0
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <GPIO_setupPinDirection+0x6a>
     d10:	84 2b       	or	r24, r20
     d12:	8c 93       	st	X, r24
     d14:	a7 c0       	rjmp	.+334    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTB_ID:
				DDRB|=(1<<pin_num);
     d16:	a7 e3       	ldi	r26, 0x37	; 55
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e7 e3       	ldi	r30, 0x37	; 55
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	48 2f       	mov	r20, r24
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 2e       	mov	r0, r18
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <GPIO_setupPinDirection+0x96>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	0a 94       	dec	r0
     d36:	e2 f7       	brpl	.-8      	; 0xd30 <GPIO_setupPinDirection+0x92>
     d38:	84 2b       	or	r24, r20
     d3a:	8c 93       	st	X, r24
     d3c:	93 c0       	rjmp	.+294    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTC_ID:
				DDRC|=(1<<pin_num);
     d3e:	a4 e3       	ldi	r26, 0x34	; 52
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e4 e3       	ldi	r30, 0x34	; 52
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	48 2f       	mov	r20, r24
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	02 2e       	mov	r0, r18
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <GPIO_setupPinDirection+0xbe>
     d58:	88 0f       	add	r24, r24
     d5a:	99 1f       	adc	r25, r25
     d5c:	0a 94       	dec	r0
     d5e:	e2 f7       	brpl	.-8      	; 0xd58 <GPIO_setupPinDirection+0xba>
     d60:	84 2b       	or	r24, r20
     d62:	8c 93       	st	X, r24
     d64:	7f c0       	rjmp	.+254    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
				break;
			default:
				DDRD|=(1<<pin_num);
     d66:	a1 e3       	ldi	r26, 0x31	; 49
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e1 e3       	ldi	r30, 0x31	; 49
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <GPIO_setupPinDirection+0xe6>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <GPIO_setupPinDirection+0xe2>
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	6b c0       	rjmp	.+214    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
				break;
			}
		}
		else if(direction==PIN_INPUT)
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	88 23       	and	r24, r24
     d92:	09 f0       	breq	.+2      	; 0xd96 <GPIO_setupPinDirection+0xf8>
     d94:	67 c0       	rjmp	.+206    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
		{
			switch(port_num)
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	3d 83       	std	Y+5, r19	; 0x05
     d9e:	2c 83       	std	Y+4, r18	; 0x04
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	9d 81       	ldd	r25, Y+5	; 0x05
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	f9 f0       	breq	.+62     	; 0xde8 <GPIO_setupPinDirection+0x14a>
     daa:	2c 81       	ldd	r18, Y+4	; 0x04
     dac:	3d 81       	ldd	r19, Y+5	; 0x05
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	79 f1       	breq	.+94     	; 0xe12 <GPIO_setupPinDirection+0x174>
     db4:	8c 81       	ldd	r24, Y+4	; 0x04
     db6:	9d 81       	ldd	r25, Y+5	; 0x05
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	09 f0       	breq	.+2      	; 0xdbe <GPIO_setupPinDirection+0x120>
     dbc:	3f c0       	rjmp	.+126    	; 0xe3c <GPIO_setupPinDirection+0x19e>
			{
			case PORTA_ID:
				DDRA&=~(1<<pin_num);
     dbe:	aa e3       	ldi	r26, 0x3A	; 58
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	ea e3       	ldi	r30, 0x3A	; 58
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <GPIO_setupPinDirection+0x13e>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <GPIO_setupPinDirection+0x13a>
     de0:	80 95       	com	r24
     de2:	84 23       	and	r24, r20
     de4:	8c 93       	st	X, r24
     de6:	3e c0       	rjmp	.+124    	; 0xe64 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTB_ID:
				DDRB&=~(1<<pin_num);
     de8:	a7 e3       	ldi	r26, 0x37	; 55
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e7 e3       	ldi	r30, 0x37	; 55
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	48 2f       	mov	r20, r24
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	02 2e       	mov	r0, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <GPIO_setupPinDirection+0x168>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	0a 94       	dec	r0
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <GPIO_setupPinDirection+0x164>
     e0a:	80 95       	com	r24
     e0c:	84 23       	and	r24, r20
     e0e:	8c 93       	st	X, r24
     e10:	29 c0       	rjmp	.+82     	; 0xe64 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTC_ID:
				DDRC&=~(1<<pin_num);
     e12:	a4 e3       	ldi	r26, 0x34	; 52
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e4 e3       	ldi	r30, 0x34	; 52
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	48 2f       	mov	r20, r24
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 2e       	mov	r0, r18
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <GPIO_setupPinDirection+0x192>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <GPIO_setupPinDirection+0x18e>
     e34:	80 95       	com	r24
     e36:	84 23       	and	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	14 c0       	rjmp	.+40     	; 0xe64 <GPIO_setupPinDirection+0x1c6>
				break;
			default:
				DDRD&=~(1<<pin_num);
     e3c:	a1 e3       	ldi	r26, 0x31	; 49
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e1 e3       	ldi	r30, 0x31	; 49
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <GPIO_setupPinDirection+0x1bc>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <GPIO_setupPinDirection+0x1b8>
     e5e:	80 95       	com	r24
     e60:	84 23       	and	r24, r20
     e62:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
     e64:	27 96       	adiw	r28, 0x07	; 7
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <GPIO_setupPortDirection>:
/*
 * Description :
 * A function to set whole port direction if it was input port or output port
 */
void GPIO_setupPortDirection(uint8 port_num,GPIO_PinDirectionType direction)
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <GPIO_setupPortDirection+0x6>
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <GPIO_setupPortDirection+0x8>
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>PORTD_ID||port_num<PORTA_ID)
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	84 30       	cpi	r24, 0x04	; 4
     e8a:	30 f5       	brcc	.+76     	; 0xed8 <GPIO_setupPortDirection+0x62>
		/*do noting*/
	}

	else
	{
		switch(port_num)
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	3c 83       	std	Y+4, r19	; 0x04
     e94:	2b 83       	std	Y+3, r18	; 0x03
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	9c 81       	ldd	r25, Y+4	; 0x04
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	91 05       	cpc	r25, r1
     e9e:	71 f0       	breq	.+28     	; 0xebc <GPIO_setupPortDirection+0x46>
     ea0:	2b 81       	ldd	r18, Y+3	; 0x03
     ea2:	3c 81       	ldd	r19, Y+4	; 0x04
     ea4:	22 30       	cpi	r18, 0x02	; 2
     ea6:	31 05       	cpc	r19, r1
     ea8:	71 f0       	breq	.+28     	; 0xec6 <GPIO_setupPortDirection+0x50>
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	79 f4       	brne	.+30     	; 0xed0 <GPIO_setupPortDirection+0x5a>
		{
		case PORTA_ID:
			DDRA=direction;
     eb2:	ea e3       	ldi	r30, 0x3A	; 58
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	80 83       	st	Z, r24
     eba:	0e c0       	rjmp	.+28     	; 0xed8 <GPIO_setupPortDirection+0x62>
			break;
		case PORTB_ID:
			DDRB=direction;
     ebc:	e7 e3       	ldi	r30, 0x37	; 55
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	80 83       	st	Z, r24
     ec4:	09 c0       	rjmp	.+18     	; 0xed8 <GPIO_setupPortDirection+0x62>
			break;
		case PORTC_ID:
			DDRC=direction;
     ec6:	e4 e3       	ldi	r30, 0x34	; 52
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	80 83       	st	Z, r24
     ece:	04 c0       	rjmp	.+8      	; 0xed8 <GPIO_setupPortDirection+0x62>
			break;
		default:
			DDRD=direction;
     ed0:	e1 e3       	ldi	r30, 0x31	; 49
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	80 83       	st	Z, r24
			break;
		}
	}
}
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <GPIO_writePin>:
/*
 * Description :
 * A function to set pin with 1 or 0
 */
void GPIO_writePin(uint8 port_num,uint8 pin_num,uint8 direction)
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	27 97       	sbiw	r28, 0x07	; 7
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	6a 83       	std	Y+2, r22	; 0x02
     efe:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num>PIN7_ID||pin_num<PIN0_ID||(direction!=1 && direction!=0))
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	88 30       	cpi	r24, 0x08	; 8
     f04:	08 f0       	brcs	.+2      	; 0xf08 <GPIO_writePin+0x22>
     f06:	d9 c0       	rjmp	.+434    	; 0x10ba <GPIO_writePin+0x1d4>
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	21 f0       	breq	.+8      	; 0xf16 <GPIO_writePin+0x30>
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	88 23       	and	r24, r24
     f12:	09 f0       	breq	.+2      	; 0xf16 <GPIO_writePin+0x30>
     f14:	d2 c0       	rjmp	.+420    	; 0x10ba <GPIO_writePin+0x1d4>
	{
		/*do noting*/
	}
	else{

		if(direction==PIN_OUTPUT)
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	81 30       	cpi	r24, 0x01	; 1
     f1a:	09 f0       	breq	.+2      	; 0xf1e <GPIO_writePin+0x38>
     f1c:	63 c0       	rjmp	.+198    	; 0xfe4 <GPIO_writePin+0xfe>
		{
			switch(port_num)
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	3f 83       	std	Y+7, r19	; 0x07
     f26:	2e 83       	std	Y+6, r18	; 0x06
     f28:	8e 81       	ldd	r24, Y+6	; 0x06
     f2a:	9f 81       	ldd	r25, Y+7	; 0x07
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	91 05       	cpc	r25, r1
     f30:	e9 f0       	breq	.+58     	; 0xf6c <GPIO_writePin+0x86>
     f32:	2e 81       	ldd	r18, Y+6	; 0x06
     f34:	3f 81       	ldd	r19, Y+7	; 0x07
     f36:	22 30       	cpi	r18, 0x02	; 2
     f38:	31 05       	cpc	r19, r1
     f3a:	61 f1       	breq	.+88     	; 0xf94 <GPIO_writePin+0xae>
     f3c:	8e 81       	ldd	r24, Y+6	; 0x06
     f3e:	9f 81       	ldd	r25, Y+7	; 0x07
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	e1 f5       	brne	.+120    	; 0xfbc <GPIO_writePin+0xd6>
			{
			case PORTA_ID:
				PORTA|=(1<<pin_num);
     f44:	ab e3       	ldi	r26, 0x3B	; 59
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	eb e3       	ldi	r30, 0x3B	; 59
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <GPIO_writePin+0x7c>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <GPIO_writePin+0x78>
     f66:	84 2b       	or	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	a7 c0       	rjmp	.+334    	; 0x10ba <GPIO_writePin+0x1d4>
				break;
			case PORTB_ID:
				PORTB|=(1<<pin_num);
     f6c:	a8 e3       	ldi	r26, 0x38	; 56
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e8 e3       	ldi	r30, 0x38	; 56
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <GPIO_writePin+0xa4>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <GPIO_writePin+0xa0>
     f8e:	84 2b       	or	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	93 c0       	rjmp	.+294    	; 0x10ba <GPIO_writePin+0x1d4>
				break;
			case PORTC_ID:
				PORTC|=(1<<pin_num);
     f94:	a5 e3       	ldi	r26, 0x35	; 53
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e5 e3       	ldi	r30, 0x35	; 53
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <GPIO_writePin+0xcc>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <GPIO_writePin+0xc8>
     fb6:	84 2b       	or	r24, r20
     fb8:	8c 93       	st	X, r24
     fba:	7f c0       	rjmp	.+254    	; 0x10ba <GPIO_writePin+0x1d4>
				break;
			default:
				PORTD|=(1<<pin_num);
     fbc:	a2 e3       	ldi	r26, 0x32	; 50
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e2 e3       	ldi	r30, 0x32	; 50
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	48 2f       	mov	r20, r24
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 2e       	mov	r0, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <GPIO_writePin+0xf4>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	0a 94       	dec	r0
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <GPIO_writePin+0xf0>
     fde:	84 2b       	or	r24, r20
     fe0:	8c 93       	st	X, r24
     fe2:	6b c0       	rjmp	.+214    	; 0x10ba <GPIO_writePin+0x1d4>
				break;
			}
		}
		else if(direction==PIN_INPUT)
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	88 23       	and	r24, r24
     fe8:	09 f0       	breq	.+2      	; 0xfec <GPIO_writePin+0x106>
     fea:	67 c0       	rjmp	.+206    	; 0x10ba <GPIO_writePin+0x1d4>
		{
			switch(port_num)
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	3d 83       	std	Y+5, r19	; 0x05
     ff4:	2c 83       	std	Y+4, r18	; 0x04
     ff6:	8c 81       	ldd	r24, Y+4	; 0x04
     ff8:	9d 81       	ldd	r25, Y+5	; 0x05
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	91 05       	cpc	r25, r1
     ffe:	f9 f0       	breq	.+62     	; 0x103e <GPIO_writePin+0x158>
    1000:	2c 81       	ldd	r18, Y+4	; 0x04
    1002:	3d 81       	ldd	r19, Y+5	; 0x05
    1004:	22 30       	cpi	r18, 0x02	; 2
    1006:	31 05       	cpc	r19, r1
    1008:	79 f1       	breq	.+94     	; 0x1068 <GPIO_writePin+0x182>
    100a:	8c 81       	ldd	r24, Y+4	; 0x04
    100c:	9d 81       	ldd	r25, Y+5	; 0x05
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	09 f0       	breq	.+2      	; 0x1014 <GPIO_writePin+0x12e>
    1012:	3f c0       	rjmp	.+126    	; 0x1092 <GPIO_writePin+0x1ac>
			{
			case PORTA_ID:
				PORTA&=~(1<<pin_num);
    1014:	ab e3       	ldi	r26, 0x3B	; 59
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	eb e3       	ldi	r30, 0x3B	; 59
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <GPIO_writePin+0x14c>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <GPIO_writePin+0x148>
    1036:	80 95       	com	r24
    1038:	84 23       	and	r24, r20
    103a:	8c 93       	st	X, r24
    103c:	3e c0       	rjmp	.+124    	; 0x10ba <GPIO_writePin+0x1d4>
				break;
			case PORTB_ID:
				PORTB&=~(1<<pin_num);
    103e:	a8 e3       	ldi	r26, 0x38	; 56
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e8 e3       	ldi	r30, 0x38	; 56
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <GPIO_writePin+0x176>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <GPIO_writePin+0x172>
    1060:	80 95       	com	r24
    1062:	84 23       	and	r24, r20
    1064:	8c 93       	st	X, r24
    1066:	29 c0       	rjmp	.+82     	; 0x10ba <GPIO_writePin+0x1d4>
				break;
			case PORTC_ID:
				PORTC&=~(1<<pin_num);
    1068:	a5 e3       	ldi	r26, 0x35	; 53
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e5 e3       	ldi	r30, 0x35	; 53
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <GPIO_writePin+0x1a0>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <GPIO_writePin+0x19c>
    108a:	80 95       	com	r24
    108c:	84 23       	and	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	14 c0       	rjmp	.+40     	; 0x10ba <GPIO_writePin+0x1d4>
				break;
			default:
				PORTD&=~(1<<pin_num);
    1092:	a2 e3       	ldi	r26, 0x32	; 50
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e2 e3       	ldi	r30, 0x32	; 50
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <GPIO_writePin+0x1ca>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <GPIO_writePin+0x1c6>
    10b4:	80 95       	com	r24
    10b6:	84 23       	and	r24, r20
    10b8:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    10ba:	27 96       	adiw	r28, 0x07	; 7
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <GPIO_writePort>:
/*
 * Description :
 * A function to write whole port direction if it is 0 or 0xFF
 */
void GPIO_writePort(uint8 port_num,uint8 direction)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <GPIO_writePort+0x6>
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <GPIO_writePort+0x8>
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	84 30       	cpi	r24, 0x04	; 4
    10e0:	30 f5       	brcc	.+76     	; 0x112e <GPIO_writePort+0x62>
		/*do noting*/
	}

	else
	{
		switch(port_num)
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	3c 83       	std	Y+4, r19	; 0x04
    10ea:	2b 83       	std	Y+3, r18	; 0x03
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	91 05       	cpc	r25, r1
    10f4:	71 f0       	breq	.+28     	; 0x1112 <GPIO_writePort+0x46>
    10f6:	2b 81       	ldd	r18, Y+3	; 0x03
    10f8:	3c 81       	ldd	r19, Y+4	; 0x04
    10fa:	22 30       	cpi	r18, 0x02	; 2
    10fc:	31 05       	cpc	r19, r1
    10fe:	71 f0       	breq	.+28     	; 0x111c <GPIO_writePort+0x50>
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	79 f4       	brne	.+30     	; 0x1126 <GPIO_writePort+0x5a>
		{
		case PORTA_ID:
			PORTA=direction;
    1108:	eb e3       	ldi	r30, 0x3B	; 59
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	80 83       	st	Z, r24
    1110:	0e c0       	rjmp	.+28     	; 0x112e <GPIO_writePort+0x62>
			break;
		case PORTB_ID:
			PORTB=direction;
    1112:	e8 e3       	ldi	r30, 0x38	; 56
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	80 83       	st	Z, r24
    111a:	09 c0       	rjmp	.+18     	; 0x112e <GPIO_writePort+0x62>
			break;
		case PORTC_ID:
			PORTC=direction;
    111c:	e5 e3       	ldi	r30, 0x35	; 53
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	80 83       	st	Z, r24
    1124:	04 c0       	rjmp	.+8      	; 0x112e <GPIO_writePort+0x62>
			break;
		default:
			PORTD=direction;
    1126:	e2 e3       	ldi	r30, 0x32	; 50
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	80 83       	st	Z, r24
			break;
		}
	}
}
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <GPIO_readPin>:
/*
 * Description :
 * A function to read pin if it is 1 or 0
 */
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	00 d0       	rcall	.+0      	; 0x1142 <GPIO_readPin+0x6>
    1142:	00 d0       	rcall	.+0      	; 0x1144 <GPIO_readPin+0x8>
    1144:	0f 92       	push	r0
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	6a 83       	std	Y+2, r22	; 0x02
	if(pin_num>PIN7_ID||pin_num<PIN0_ID)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	88 30       	cpi	r24, 0x08	; 8
    1152:	10 f0       	brcs	.+4      	; 0x1158 <GPIO_readPin+0x1c>
	{
		return 0;
    1154:	1d 82       	std	Y+5, r1	; 0x05
    1156:	5f c0       	rjmp	.+190    	; 0x1216 <GPIO_readPin+0xda>
	}
	else{
		switch(port_num)
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	3c 83       	std	Y+4, r19	; 0x04
    1160:	2b 83       	std	Y+3, r18	; 0x03
    1162:	4b 81       	ldd	r20, Y+3	; 0x03
    1164:	5c 81       	ldd	r21, Y+4	; 0x04
    1166:	41 30       	cpi	r20, 0x01	; 1
    1168:	51 05       	cpc	r21, r1
    116a:	e9 f0       	breq	.+58     	; 0x11a6 <GPIO_readPin+0x6a>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	82 30       	cpi	r24, 0x02	; 2
    1172:	91 05       	cpc	r25, r1
    1174:	59 f1       	breq	.+86     	; 0x11cc <GPIO_readPin+0x90>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	21 15       	cp	r18, r1
    117c:	31 05       	cpc	r19, r1
    117e:	c9 f5       	brne	.+114    	; 0x11f2 <GPIO_readPin+0xb6>
		{
		case PORTA_ID:
			return GET_BIT(PINA,pin_num);
    1180:	e9 e3       	ldi	r30, 0x39	; 57
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	88 2f       	mov	r24, r24
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	a9 01       	movw	r20, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <GPIO_readPin+0x5c>
    1194:	55 95       	asr	r21
    1196:	47 95       	ror	r20
    1198:	8a 95       	dec	r24
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <GPIO_readPin+0x58>
    119c:	ca 01       	movw	r24, r20
    119e:	58 2f       	mov	r21, r24
    11a0:	51 70       	andi	r21, 0x01	; 1
    11a2:	5d 83       	std	Y+5, r21	; 0x05
    11a4:	38 c0       	rjmp	.+112    	; 0x1216 <GPIO_readPin+0xda>
		case PORTB_ID:
			return GET_BIT(PINB,pin_num);
    11a6:	e6 e3       	ldi	r30, 0x36	; 54
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	a9 01       	movw	r20, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <GPIO_readPin+0x82>
    11ba:	55 95       	asr	r21
    11bc:	47 95       	ror	r20
    11be:	8a 95       	dec	r24
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <GPIO_readPin+0x7e>
    11c2:	ca 01       	movw	r24, r20
    11c4:	58 2f       	mov	r21, r24
    11c6:	51 70       	andi	r21, 0x01	; 1
    11c8:	5d 83       	std	Y+5, r21	; 0x05
    11ca:	25 c0       	rjmp	.+74     	; 0x1216 <GPIO_readPin+0xda>
		case PORTC_ID:
			return GET_BIT(PINC,pin_num);
    11cc:	e3 e3       	ldi	r30, 0x33	; 51
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	a9 01       	movw	r20, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <GPIO_readPin+0xa8>
    11e0:	55 95       	asr	r21
    11e2:	47 95       	ror	r20
    11e4:	8a 95       	dec	r24
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <GPIO_readPin+0xa4>
    11e8:	ca 01       	movw	r24, r20
    11ea:	58 2f       	mov	r21, r24
    11ec:	51 70       	andi	r21, 0x01	; 1
    11ee:	5d 83       	std	Y+5, r21	; 0x05
    11f0:	12 c0       	rjmp	.+36     	; 0x1216 <GPIO_readPin+0xda>
		default:
			return GET_BIT(PIND,pin_num);
    11f2:	e0 e3       	ldi	r30, 0x30	; 48
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	a9 01       	movw	r20, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <GPIO_readPin+0xce>
    1206:	55 95       	asr	r21
    1208:	47 95       	ror	r20
    120a:	8a 95       	dec	r24
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <GPIO_readPin+0xca>
    120e:	ca 01       	movw	r24, r20
    1210:	58 2f       	mov	r21, r24
    1212:	51 70       	andi	r21, 0x01	; 1
    1214:	5d 83       	std	Y+5, r21	; 0x05
    1216:	8d 81       	ldd	r24, Y+5	; 0x05
		}
	}
}
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <GPIO_readPort>:
/*
 * Description :
 * A function to read whole port direction if it is 0 or 0xFF
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	00 d0       	rcall	.+0      	; 0x122e <GPIO_readPort+0x6>
    122e:	00 d0       	rcall	.+0      	; 0x1230 <GPIO_readPort+0x8>
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	89 83       	std	Y+1, r24	; 0x01
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	84 30       	cpi	r24, 0x04	; 4
    123a:	10 f0       	brcs	.+4      	; 0x1240 <GPIO_readPort+0x18>
	{
		return 0;
    123c:	1c 82       	std	Y+4, r1	; 0x04
    123e:	26 c0       	rjmp	.+76     	; 0x128c <GPIO_readPort+0x64>
	}

	else
	{
		switch(port_num)
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	3b 83       	std	Y+3, r19	; 0x03
    1248:	2a 83       	std	Y+2, r18	; 0x02
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	9b 81       	ldd	r25, Y+3	; 0x03
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	91 05       	cpc	r25, r1
    1252:	71 f0       	breq	.+28     	; 0x1270 <GPIO_readPort+0x48>
    1254:	2a 81       	ldd	r18, Y+2	; 0x02
    1256:	3b 81       	ldd	r19, Y+3	; 0x03
    1258:	22 30       	cpi	r18, 0x02	; 2
    125a:	31 05       	cpc	r19, r1
    125c:	71 f0       	breq	.+28     	; 0x127a <GPIO_readPort+0x52>
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	9b 81       	ldd	r25, Y+3	; 0x03
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	79 f4       	brne	.+30     	; 0x1284 <GPIO_readPort+0x5c>
		{
		case PORTA_ID:
			return PINA;
    1266:	e9 e3       	ldi	r30, 0x39	; 57
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	90 81       	ld	r25, Z
    126c:	9c 83       	std	Y+4, r25	; 0x04
    126e:	0e c0       	rjmp	.+28     	; 0x128c <GPIO_readPort+0x64>
		case PORTB_ID:
			return PINB;
    1270:	e6 e3       	ldi	r30, 0x36	; 54
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	20 81       	ld	r18, Z
    1276:	2c 83       	std	Y+4, r18	; 0x04
    1278:	09 c0       	rjmp	.+18     	; 0x128c <GPIO_readPort+0x64>
		case PORTC_ID:
			return PINC;
    127a:	e3 e3       	ldi	r30, 0x33	; 51
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	30 81       	ld	r19, Z
    1280:	3c 83       	std	Y+4, r19	; 0x04
    1282:	04 c0       	rjmp	.+8      	; 0x128c <GPIO_readPort+0x64>
		default:
			return PINC;
    1284:	e3 e3       	ldi	r30, 0x33	; 51
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	8c 83       	std	Y+4, r24	; 0x04
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
		}
	}
}
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <ultrasonic_init>:
 * 1 - Initialize the ICU driver as required.
 * 2 - Setup the ICU call back function.
 * 3 - Setup the direction for the trigger pin as output pin through the GPIO driver.
 */
void ultrasonic_init(void)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <ultrasonic_init+0x6>
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
	/*set the freq and edge of ICU*/
	ICU_ConfigType config={F_CPU_8,RISING_EDGE};
    12a6:	82 e0       	ldi	r24, 0x02	; 2
    12a8:	89 83       	std	Y+1, r24	; 0x01
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	8a 83       	std	Y+2, r24	; 0x02

	/*initialize the ICU driver*/
	ICU_init(&config);
    12ae:	ce 01       	movw	r24, r28
    12b0:	01 96       	adiw	r24, 0x01	; 1
    12b2:	0e 94 b5 0a 	call	0x156a	; 0x156a <ICU_init>

	/* set call back function */
	ICU_setCallBack(*ultrasonic_edgeProcessing);
    12b6:	8f e5       	ldi	r24, 0x5F	; 95
    12b8:	9a e0       	ldi	r25, 0x0A	; 10
    12ba:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <ICU_setCallBack>

	/* make the trigger pin at PB5 as output*/
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,1);
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	65 e0       	ldi	r22, 0x05	; 5
    12c2:	41 e0       	ldi	r20, 0x01	; 1
    12c4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>

}
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <ultrasonic_Trigger>:
/*
 * Description :
 * 1 - Send the Trigger pulse to the ultrasonic.
 */
void ultrasonic_Trigger(void)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	68 97       	sbiw	r28, 0x18	; 24
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(PORTB_ID,PIN5_ID,1);
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	65 e0       	ldi	r22, 0x05	; 5
    12ea:	41 e0       	ldi	r20, 0x01	; 1
    12ec:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	a0 e2       	ldi	r26, 0x20	; 32
    12f6:	b1 e4       	ldi	r27, 0x41	; 65
    12f8:	8d 8b       	std	Y+21, r24	; 0x15
    12fa:	9e 8b       	std	Y+22, r25	; 0x16
    12fc:	af 8b       	std	Y+23, r26	; 0x17
    12fe:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1300:	6d 89       	ldd	r22, Y+21	; 0x15
    1302:	7e 89       	ldd	r23, Y+22	; 0x16
    1304:	8f 89       	ldd	r24, Y+23	; 0x17
    1306:	98 8d       	ldd	r25, Y+24	; 0x18
    1308:	2b ea       	ldi	r18, 0xAB	; 171
    130a:	3a ea       	ldi	r19, 0xAA	; 170
    130c:	4a e2       	ldi	r20, 0x2A	; 42
    130e:	50 e4       	ldi	r21, 0x40	; 64
    1310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	89 8b       	std	Y+17, r24	; 0x11
    131a:	9a 8b       	std	Y+18, r25	; 0x12
    131c:	ab 8b       	std	Y+19, r26	; 0x13
    131e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1320:	69 89       	ldd	r22, Y+17	; 0x11
    1322:	7a 89       	ldd	r23, Y+18	; 0x12
    1324:	8b 89       	ldd	r24, Y+19	; 0x13
    1326:	9c 89       	ldd	r25, Y+20	; 0x14
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	40 e8       	ldi	r20, 0x80	; 128
    132e:	5f e3       	ldi	r21, 0x3F	; 63
    1330:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1334:	88 23       	and	r24, r24
    1336:	1c f4       	brge	.+6      	; 0x133e <ultrasonic_Trigger+0x6c>
		__ticks = 1;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	88 8b       	std	Y+16, r24	; 0x10
    133c:	91 c0       	rjmp	.+290    	; 0x1460 <ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    133e:	69 89       	ldd	r22, Y+17	; 0x11
    1340:	7a 89       	ldd	r23, Y+18	; 0x12
    1342:	8b 89       	ldd	r24, Y+19	; 0x13
    1344:	9c 89       	ldd	r25, Y+20	; 0x14
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	4f e7       	ldi	r20, 0x7F	; 127
    134c:	53 e4       	ldi	r21, 0x43	; 67
    134e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1352:	18 16       	cp	r1, r24
    1354:	0c f0       	brlt	.+2      	; 0x1358 <ultrasonic_Trigger+0x86>
    1356:	7b c0       	rjmp	.+246    	; 0x144e <ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1358:	6d 89       	ldd	r22, Y+21	; 0x15
    135a:	7e 89       	ldd	r23, Y+22	; 0x16
    135c:	8f 89       	ldd	r24, Y+23	; 0x17
    135e:	98 8d       	ldd	r25, Y+24	; 0x18
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	4a e7       	ldi	r20, 0x7A	; 122
    1366:	54 e4       	ldi	r21, 0x44	; 68
    1368:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	8c 87       	std	Y+12, r24	; 0x0c
    1372:	9d 87       	std	Y+13, r25	; 0x0d
    1374:	ae 87       	std	Y+14, r26	; 0x0e
    1376:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1378:	6c 85       	ldd	r22, Y+12	; 0x0c
    137a:	7d 85       	ldd	r23, Y+13	; 0x0d
    137c:	8e 85       	ldd	r24, Y+14	; 0x0e
    137e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	4a ef       	ldi	r20, 0xFA	; 250
    1386:	54 e4       	ldi	r21, 0x44	; 68
    1388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	88 87       	std	Y+8, r24	; 0x08
    1392:	99 87       	std	Y+9, r25	; 0x09
    1394:	aa 87       	std	Y+10, r26	; 0x0a
    1396:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1398:	68 85       	ldd	r22, Y+8	; 0x08
    139a:	79 85       	ldd	r23, Y+9	; 0x09
    139c:	8a 85       	ldd	r24, Y+10	; 0x0a
    139e:	9b 85       	ldd	r25, Y+11	; 0x0b
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e8       	ldi	r20, 0x80	; 128
    13a6:	5f e3       	ldi	r21, 0x3F	; 63
    13a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13ac:	88 23       	and	r24, r24
    13ae:	2c f4       	brge	.+10     	; 0x13ba <ultrasonic_Trigger+0xe8>
		__ticks = 1;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	9f 83       	std	Y+7, r25	; 0x07
    13b6:	8e 83       	std	Y+6, r24	; 0x06
    13b8:	3f c0       	rjmp	.+126    	; 0x1438 <ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    13ba:	68 85       	ldd	r22, Y+8	; 0x08
    13bc:	79 85       	ldd	r23, Y+9	; 0x09
    13be:	8a 85       	ldd	r24, Y+10	; 0x0a
    13c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	3f ef       	ldi	r19, 0xFF	; 255
    13c6:	4f e7       	ldi	r20, 0x7F	; 127
    13c8:	57 e4       	ldi	r21, 0x47	; 71
    13ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13ce:	18 16       	cp	r1, r24
    13d0:	4c f5       	brge	.+82     	; 0x1424 <ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d2:	6c 85       	ldd	r22, Y+12	; 0x0c
    13d4:	7d 85       	ldd	r23, Y+13	; 0x0d
    13d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    13d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	40 e2       	ldi	r20, 0x20	; 32
    13e0:	51 e4       	ldi	r21, 0x41	; 65
    13e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	bc 01       	movw	r22, r24
    13ec:	cd 01       	movw	r24, r26
    13ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	9f 83       	std	Y+7, r25	; 0x07
    13f8:	8e 83       	std	Y+6, r24	; 0x06
    13fa:	0f c0       	rjmp	.+30     	; 0x141a <ultrasonic_Trigger+0x148>
    13fc:	88 ec       	ldi	r24, 0xC8	; 200
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	9d 83       	std	Y+5, r25	; 0x05
    1402:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1404:	8c 81       	ldd	r24, Y+4	; 0x04
    1406:	9d 81       	ldd	r25, Y+5	; 0x05
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	f1 f7       	brne	.-4      	; 0x1408 <ultrasonic_Trigger+0x136>
    140c:	9d 83       	std	Y+5, r25	; 0x05
    140e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1410:	8e 81       	ldd	r24, Y+6	; 0x06
    1412:	9f 81       	ldd	r25, Y+7	; 0x07
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	9f 83       	std	Y+7, r25	; 0x07
    1418:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141a:	8e 81       	ldd	r24, Y+6	; 0x06
    141c:	9f 81       	ldd	r25, Y+7	; 0x07
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	69 f7       	brne	.-38     	; 0x13fc <ultrasonic_Trigger+0x12a>
    1422:	24 c0       	rjmp	.+72     	; 0x146c <ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1424:	68 85       	ldd	r22, Y+8	; 0x08
    1426:	79 85       	ldd	r23, Y+9	; 0x09
    1428:	8a 85       	ldd	r24, Y+10	; 0x0a
    142a:	9b 85       	ldd	r25, Y+11	; 0x0b
    142c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	9f 83       	std	Y+7, r25	; 0x07
    1436:	8e 83       	std	Y+6, r24	; 0x06
    1438:	8e 81       	ldd	r24, Y+6	; 0x06
    143a:	9f 81       	ldd	r25, Y+7	; 0x07
    143c:	9b 83       	std	Y+3, r25	; 0x03
    143e:	8a 83       	std	Y+2, r24	; 0x02
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	9b 81       	ldd	r25, Y+3	; 0x03
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	f1 f7       	brne	.-4      	; 0x1444 <ultrasonic_Trigger+0x172>
    1448:	9b 83       	std	Y+3, r25	; 0x03
    144a:	8a 83       	std	Y+2, r24	; 0x02
    144c:	0f c0       	rjmp	.+30     	; 0x146c <ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    144e:	69 89       	ldd	r22, Y+17	; 0x11
    1450:	7a 89       	ldd	r23, Y+18	; 0x12
    1452:	8b 89       	ldd	r24, Y+19	; 0x13
    1454:	9c 89       	ldd	r25, Y+20	; 0x14
    1456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	88 8b       	std	Y+16, r24	; 0x10
    1460:	88 89       	ldd	r24, Y+16	; 0x10
    1462:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	8a 95       	dec	r24
    1468:	f1 f7       	brne	.-4      	; 0x1466 <ultrasonic_Trigger+0x194>
    146a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	GPIO_writePin(PORTB_ID,PIN5_ID,0);
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	65 e0       	ldi	r22, 0x05	; 5
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
}
    1476:	68 96       	adiw	r28, 0x18	; 24
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	de bf       	out	0x3e, r29	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	cd bf       	out	0x3d, r28	; 61
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	08 95       	ret

00001488 <ultrasonic_readDistance>:
 * Description :
 * 1 - Send the trigger pulse by using Ultrasonic_Trigger function
 * 2 - Start the measurements by the ICU from this moment
 */
uint16 ultrasonic_readDistance(void)
{
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
	/*clear the edges to look for the next one*/
	g_edges=0;
    1490:	10 92 7e 00 	sts	0x007E, r1

	/*clear the ICU timer*/
	ICU_clearTimerValue();
    1494:	0e 94 39 0b 	call	0x1672	; 0x1672 <ICU_clearTimerValue>

	/* send trigger */
	ultrasonic_Trigger();
    1498:	0e 94 69 09 	call	0x12d2	; 0x12d2 <ultrasonic_Trigger>

	/* wait till we recieve counting */
	while(g_edges != 2)
    149c:	80 91 7e 00 	lds	r24, 0x007E
    14a0:	82 30       	cpi	r24, 0x02	; 2
    14a2:	e1 f7       	brne	.-8      	; 0x149c <ultrasonic_readDistance+0x14>
	{

	}

	/*return distance which equals time/58.8*/
	return (g_time / 58);
    14a4:	80 91 7c 00 	lds	r24, 0x007C
    14a8:	90 91 7d 00 	lds	r25, 0x007D
    14ac:	2a e3       	ldi	r18, 0x3A	; 58
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	b9 01       	movw	r22, r18
    14b2:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <__udivmodhi4>
    14b6:	cb 01       	movw	r24, r22
}
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <ultrasonic_edgeProcessing>:
 * Description :
 * 1 - This is the call back function called by the ICU driver
 * 2 - This is used to calculate the high time (pulse time) generated by the ultrasonic sensor.
 */
void ultrasonic_edgeProcessing(void)
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
	g_edges++;
    14c6:	80 91 7e 00 	lds	r24, 0x007E
    14ca:	8f 5f       	subi	r24, 0xFF	; 255
    14cc:	80 93 7e 00 	sts	0x007E, r24

	/*we detect a rising edge*/
	if(g_edges==1)
    14d0:	80 91 7e 00 	lds	r24, 0x007E
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	31 f4       	brne	.+12     	; 0x14e4 <ultrasonic_edgeProcessing+0x26>
	{
		/*clear timer*/
		ICU_clearTimerValue();
    14d8:	0e 94 39 0b 	call	0x1672	; 0x1672 <ICU_clearTimerValue>

		/*look for the falling edge*/
		ICU_setEdgeDetectionType(FALLING_EDGE);
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	0e 94 0f 0b 	call	0x161e	; 0x161e <ICU_setEdgeDetectionType>
    14e2:	0d c0       	rjmp	.+26     	; 0x14fe <ultrasonic_edgeProcessing+0x40>
	}

	/*we detect a rising edge*/
	else if(g_edges==2)
    14e4:	80 91 7e 00 	lds	r24, 0x007E
    14e8:	82 30       	cpi	r24, 0x02	; 2
    14ea:	49 f4       	brne	.+18     	; 0x14fe <ultrasonic_edgeProcessing+0x40>
	{
		/*get the value*/
		g_time=ICU_getInputCaptureValue();
    14ec:	0e 94 2e 0b 	call	0x165c	; 0x165c <ICU_getInputCaptureValue>
    14f0:	90 93 7d 00 	sts	0x007D, r25
    14f4:	80 93 7c 00 	sts	0x007C, r24

		/*look for the rising edge for next pulse*/
		ICU_setEdgeDetectionType(RISING_EDGE);
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	0e 94 0f 0b 	call	0x161e	; 0x161e <ICU_setEdgeDetectionType>

	}
}
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <__vector_6>:
/*
 * Description:
 * The ISR code which call the call back function
 */
ISR(TIMER1_CAPT_vect)
{
    1504:	1f 92       	push	r1
    1506:	0f 92       	push	r0
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	0f 92       	push	r0
    150c:	11 24       	eor	r1, r1
    150e:	2f 93       	push	r18
    1510:	3f 93       	push	r19
    1512:	4f 93       	push	r20
    1514:	5f 93       	push	r21
    1516:	6f 93       	push	r22
    1518:	7f 93       	push	r23
    151a:	8f 93       	push	r24
    151c:	9f 93       	push	r25
    151e:	af 93       	push	r26
    1520:	bf 93       	push	r27
    1522:	ef 93       	push	r30
    1524:	ff 93       	push	r31
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
	if(g_theCallBackFunction!= NULL_PTR)
    152e:	80 91 7f 00 	lds	r24, 0x007F
    1532:	90 91 80 00 	lds	r25, 0x0080
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	29 f0       	breq	.+10     	; 0x1544 <__vector_6+0x40>
		(*g_theCallBackFunction)();
    153a:	e0 91 7f 00 	lds	r30, 0x007F
    153e:	f0 91 80 00 	lds	r31, 0x0080
    1542:	09 95       	icall
}
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	ff 91       	pop	r31
    154a:	ef 91       	pop	r30
    154c:	bf 91       	pop	r27
    154e:	af 91       	pop	r26
    1550:	9f 91       	pop	r25
    1552:	8f 91       	pop	r24
    1554:	7f 91       	pop	r23
    1556:	6f 91       	pop	r22
    1558:	5f 91       	pop	r21
    155a:	4f 91       	pop	r20
    155c:	3f 91       	pop	r19
    155e:	2f 91       	pop	r18
    1560:	0f 90       	pop	r0
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	0f 90       	pop	r0
    1566:	1f 90       	pop	r1
    1568:	18 95       	reti

0000156a <ICU_init>:
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 * 	NOTE : Sorry ! i tried to make it with dynamic configuration with timer modes
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	00 d0       	rcall	.+0      	; 0x1570 <ICU_init+0x6>
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	9a 83       	std	Y+2, r25	; 0x02
    1576:	89 83       	std	Y+1, r24	; 0x01
	/*set the ICU1 pin as input PD6*/
	DDRD&=(1<<PD6);
    1578:	a1 e3       	ldi	r26, 0x31	; 49
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e1 e3       	ldi	r30, 0x31	; 49
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	80 74       	andi	r24, 0x40	; 64
    1584:	8c 93       	st	X, r24
	 * TCCR1A register :-
	 * 1 - COM1A 1:0 & COM1B 1:0 are set to 0 (disconnect OC1A & OC1B)
	 * 2 - FOC1A & FOC1B are set to 0 (non-pwm mode)
	 * 3 - WGM1 3:0 are set to 0 (normal mode)
	 */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1586:	ef e4       	ldi	r30, 0x4F	; 79
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	8c e0       	ldi	r24, 0x0C	; 12
    158c:	80 83       	st	Z, r24
	 * 1 - ICNC1 is set to remove noise cancellation at low frequency
	 * 2 - ICES1 is set(rising edge) or cleared(falling edge) according to user choice (6th bit)
	 * 3 - WGM1 3:0 are set to 0 (normal mode)
	 * 4 - CS1 2:0 is dynamic configurable which is responsible for prescaler ( 1st & 2nd & 3rd bits)
	 */
	TCCR1B|=( (Config_Ptr->edge) <<6 ) | (Config_Ptr->clock);
    158e:	ae e4       	ldi	r26, 0x4E	; 78
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	ee e4       	ldi	r30, 0x4E	; 78
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	28 2f       	mov	r18, r24
    159a:	e9 81       	ldd	r30, Y+1	; 0x01
    159c:	fa 81       	ldd	r31, Y+2	; 0x02
    159e:	81 81       	ldd	r24, Z+1	; 0x01
    15a0:	88 2f       	mov	r24, r24
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	00 24       	eor	r0, r0
    15a6:	96 95       	lsr	r25
    15a8:	87 95       	ror	r24
    15aa:	07 94       	ror	r0
    15ac:	96 95       	lsr	r25
    15ae:	87 95       	ror	r24
    15b0:	07 94       	ror	r0
    15b2:	98 2f       	mov	r25, r24
    15b4:	80 2d       	mov	r24, r0
    15b6:	98 2f       	mov	r25, r24
    15b8:	e9 81       	ldd	r30, Y+1	; 0x01
    15ba:	fa 81       	ldd	r31, Y+2	; 0x02
    15bc:	80 81       	ld	r24, Z
    15be:	89 2b       	or	r24, r25
    15c0:	82 2b       	or	r24, r18
    15c2:	8c 93       	st	X, r24

	/*
	 * TIMSK register :-
	 * 1 - set TICIE1 to enable the interrupts
	 */
	TIMSK|=(1<<TICIE1);
    15c4:	a9 e5       	ldi	r26, 0x59	; 89
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e9 e5       	ldi	r30, 0x59	; 89
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	80 62       	ori	r24, 0x20	; 32
    15d0:	8c 93       	st	X, r24

	/************************* The following are optional :)**********************/

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    15d2:	ec e4       	ldi	r30, 0x4C	; 76
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	11 82       	std	Z+1, r1	; 0x01
    15d8:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    15da:	e6 e4       	ldi	r30, 0x46	; 70
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	11 82       	std	Z+1, r1	; 0x01
    15e0:	10 82       	st	Z, r1
	TIMSK |= (1<<TICIE1);
    15e2:	a9 e5       	ldi	r26, 0x59	; 89
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e9 e5       	ldi	r30, 0x59	; 89
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	80 62       	ori	r24, 0x20	; 32
    15ee:	8c 93       	st	X, r24
}
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <ICU_setCallBack+0x6>
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	9a 83       	std	Y+2, r25	; 0x02
    1606:	89 83       	std	Y+1, r24	; 0x01
	g_theCallBackFunction=a_ptr;
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	9a 81       	ldd	r25, Y+2	; 0x02
    160c:	90 93 80 00 	sts	0x0080, r25
    1610:	80 93 7f 00 	sts	0x007F, r24
}
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_edge_Type edgeType)
{
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	0f 92       	push	r0
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = (TCCR1B & 0xBF) |( edgeType << 6 );
    162a:	ae e4       	ldi	r26, 0x4E	; 78
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	ee e4       	ldi	r30, 0x4E	; 78
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	28 2f       	mov	r18, r24
    1636:	2f 7b       	andi	r18, 0xBF	; 191
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	88 2f       	mov	r24, r24
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	00 24       	eor	r0, r0
    1640:	96 95       	lsr	r25
    1642:	87 95       	ror	r24
    1644:	07 94       	ror	r0
    1646:	96 95       	lsr	r25
    1648:	87 95       	ror	r24
    164a:	07 94       	ror	r0
    164c:	98 2f       	mov	r25, r24
    164e:	80 2d       	mov	r24, r0
    1650:	82 2b       	or	r24, r18
    1652:	8c 93       	st	X, r24
}
    1654:	0f 90       	pop	r0
    1656:	cf 91       	pop	r28
    1658:	df 91       	pop	r29
    165a:	08 95       	ret

0000165c <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1664:	e6 e4       	ldi	r30, 0x46	; 70
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	91 81       	ldd	r25, Z+1	; 0x01
}
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0 ;
    167a:	ec e4       	ldi	r30, 0x4C	; 76
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	11 82       	std	Z+1, r1	; 0x01
    1680:	10 82       	st	Z, r1
}
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <ICU_DeInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_DeInit(void)
{
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
	/* clear TCCR1A and TCCR1B registers*/
	TCCR1A = 0;
    1690:	ef e4       	ldi	r30, 0x4F	; 79
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	10 82       	st	Z, r1
	TCCR1B = 0;
    1696:	ee e4       	ldi	r30, 0x4E	; 78
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	10 82       	st	Z, r1

	/* clear the counter*/
	TCNT1 = 0;
    169c:	ec e4       	ldi	r30, 0x4C	; 76
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	11 82       	std	Z+1, r1	; 0x01
    16a2:	10 82       	st	Z, r1

	/* Disable the flag*/
	TIMSK &=~(1<<TICIE1);
    16a4:	a9 e5       	ldi	r26, 0x59	; 89
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e9 e5       	ldi	r30, 0x59	; 89
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	8f 7d       	andi	r24, 0xDF	; 223
    16b0:	8c 93       	st	X, r24

	/*clear the value stored at ICR register*/
	ICR1=0;
    16b2:	e6 e4       	ldi	r30, 0x46	; 70
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	11 82       	std	Z+1, r1	; 0x01
    16b8:	10 82       	st	Z, r1
}
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	08 95       	ret

000016c0 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	6c 97       	sbiw	r28, 0x1c	; 28
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
	/* 1- Configure the Enable and RS as output ports */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	62 e0       	ldi	r22, 0x02	; 2
    16e2:	41 e0       	ldi	r20, 0x01	; 1
    16e4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	61 e0       	ldi	r22, 0x01	; 1
    16ec:	41 e0       	ldi	r20, 0x01	; 1
    16ee:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	a0 ea       	ldi	r26, 0xA0	; 160
    16f8:	b1 e4       	ldi	r27, 0x41	; 65
    16fa:	89 8f       	std	Y+25, r24	; 0x19
    16fc:	9a 8f       	std	Y+26, r25	; 0x1a
    16fe:	ab 8f       	std	Y+27, r26	; 0x1b
    1700:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1702:	69 8d       	ldd	r22, Y+25	; 0x19
    1704:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1706:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1708:	9c 8d       	ldd	r25, Y+28	; 0x1c
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	4a ef       	ldi	r20, 0xFA	; 250
    1710:	54 e4       	ldi	r21, 0x44	; 68
    1712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	8d 8b       	std	Y+21, r24	; 0x15
    171c:	9e 8b       	std	Y+22, r25	; 0x16
    171e:	af 8b       	std	Y+23, r26	; 0x17
    1720:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1722:	6d 89       	ldd	r22, Y+21	; 0x15
    1724:	7e 89       	ldd	r23, Y+22	; 0x16
    1726:	8f 89       	ldd	r24, Y+23	; 0x17
    1728:	98 8d       	ldd	r25, Y+24	; 0x18
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e8       	ldi	r20, 0x80	; 128
    1730:	5f e3       	ldi	r21, 0x3F	; 63
    1732:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1736:	88 23       	and	r24, r24
    1738:	2c f4       	brge	.+10     	; 0x1744 <LCD_init+0x84>
		__ticks = 1;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	9c 8b       	std	Y+20, r25	; 0x14
    1740:	8b 8b       	std	Y+19, r24	; 0x13
    1742:	3f c0       	rjmp	.+126    	; 0x17c2 <LCD_init+0x102>
	else if (__tmp > 65535)
    1744:	6d 89       	ldd	r22, Y+21	; 0x15
    1746:	7e 89       	ldd	r23, Y+22	; 0x16
    1748:	8f 89       	ldd	r24, Y+23	; 0x17
    174a:	98 8d       	ldd	r25, Y+24	; 0x18
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	3f ef       	ldi	r19, 0xFF	; 255
    1750:	4f e7       	ldi	r20, 0x7F	; 127
    1752:	57 e4       	ldi	r21, 0x47	; 71
    1754:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1758:	18 16       	cp	r1, r24
    175a:	4c f5       	brge	.+82     	; 0x17ae <LCD_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175c:	69 8d       	ldd	r22, Y+25	; 0x19
    175e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1760:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1762:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	40 e2       	ldi	r20, 0x20	; 32
    176a:	51 e4       	ldi	r21, 0x41	; 65
    176c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	bc 01       	movw	r22, r24
    1776:	cd 01       	movw	r24, r26
    1778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	9c 8b       	std	Y+20, r25	; 0x14
    1782:	8b 8b       	std	Y+19, r24	; 0x13
    1784:	0f c0       	rjmp	.+30     	; 0x17a4 <LCD_init+0xe4>
    1786:	88 ec       	ldi	r24, 0xC8	; 200
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	9a 8b       	std	Y+18, r25	; 0x12
    178c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    178e:	89 89       	ldd	r24, Y+17	; 0x11
    1790:	9a 89       	ldd	r25, Y+18	; 0x12
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	f1 f7       	brne	.-4      	; 0x1792 <LCD_init+0xd2>
    1796:	9a 8b       	std	Y+18, r25	; 0x12
    1798:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    179a:	8b 89       	ldd	r24, Y+19	; 0x13
    179c:	9c 89       	ldd	r25, Y+20	; 0x14
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	9c 8b       	std	Y+20, r25	; 0x14
    17a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a4:	8b 89       	ldd	r24, Y+19	; 0x13
    17a6:	9c 89       	ldd	r25, Y+20	; 0x14
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	69 f7       	brne	.-38     	; 0x1786 <LCD_init+0xc6>
    17ac:	14 c0       	rjmp	.+40     	; 0x17d6 <LCD_init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ae:	6d 89       	ldd	r22, Y+21	; 0x15
    17b0:	7e 89       	ldd	r23, Y+22	; 0x16
    17b2:	8f 89       	ldd	r24, Y+23	; 0x17
    17b4:	98 8d       	ldd	r25, Y+24	; 0x18
    17b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	9c 8b       	std	Y+20, r25	; 0x14
    17c0:	8b 8b       	std	Y+19, r24	; 0x13
    17c2:	8b 89       	ldd	r24, Y+19	; 0x13
    17c4:	9c 89       	ldd	r25, Y+20	; 0x14
    17c6:	98 8b       	std	Y+16, r25	; 0x10
    17c8:	8f 87       	std	Y+15, r24	; 0x0f
    17ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    17cc:	98 89       	ldd	r25, Y+16	; 0x10
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <LCD_init+0x10e>
    17d2:	98 8b       	std	Y+16, r25	; 0x10
    17d4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);

#if(LCD_BIT_MODE == 8)
	/* 2 - Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	6f ef       	ldi	r22, 0xFF	; 255
    17da:	0e 94 3b 07 	call	0xe76	; 0xe76 <GPIO_setupPortDirection>
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	a0 ea       	ldi	r26, 0xA0	; 160
    17e4:	b1 e4       	ldi	r27, 0x41	; 65
    17e6:	8b 87       	std	Y+11, r24	; 0x0b
    17e8:	9c 87       	std	Y+12, r25	; 0x0c
    17ea:	ad 87       	std	Y+13, r26	; 0x0d
    17ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	4a ef       	ldi	r20, 0xFA	; 250
    17fc:	54 e4       	ldi	r21, 0x44	; 68
    17fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	8f 83       	std	Y+7, r24	; 0x07
    1808:	98 87       	std	Y+8, r25	; 0x08
    180a:	a9 87       	std	Y+9, r26	; 0x09
    180c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    180e:	6f 81       	ldd	r22, Y+7	; 0x07
    1810:	78 85       	ldd	r23, Y+8	; 0x08
    1812:	89 85       	ldd	r24, Y+9	; 0x09
    1814:	9a 85       	ldd	r25, Y+10	; 0x0a
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e8       	ldi	r20, 0x80	; 128
    181c:	5f e3       	ldi	r21, 0x3F	; 63
    181e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1822:	88 23       	and	r24, r24
    1824:	2c f4       	brge	.+10     	; 0x1830 <LCD_init+0x170>
		__ticks = 1;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	9e 83       	std	Y+6, r25	; 0x06
    182c:	8d 83       	std	Y+5, r24	; 0x05
    182e:	3f c0       	rjmp	.+126    	; 0x18ae <LCD_init+0x1ee>
	else if (__tmp > 65535)
    1830:	6f 81       	ldd	r22, Y+7	; 0x07
    1832:	78 85       	ldd	r23, Y+8	; 0x08
    1834:	89 85       	ldd	r24, Y+9	; 0x09
    1836:	9a 85       	ldd	r25, Y+10	; 0x0a
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	3f ef       	ldi	r19, 0xFF	; 255
    183c:	4f e7       	ldi	r20, 0x7F	; 127
    183e:	57 e4       	ldi	r21, 0x47	; 71
    1840:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1844:	18 16       	cp	r1, r24
    1846:	4c f5       	brge	.+82     	; 0x189a <LCD_init+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1848:	6b 85       	ldd	r22, Y+11	; 0x0b
    184a:	7c 85       	ldd	r23, Y+12	; 0x0c
    184c:	8d 85       	ldd	r24, Y+13	; 0x0d
    184e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e2       	ldi	r20, 0x20	; 32
    1856:	51 e4       	ldi	r21, 0x41	; 65
    1858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	bc 01       	movw	r22, r24
    1862:	cd 01       	movw	r24, r26
    1864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	9e 83       	std	Y+6, r25	; 0x06
    186e:	8d 83       	std	Y+5, r24	; 0x05
    1870:	0f c0       	rjmp	.+30     	; 0x1890 <LCD_init+0x1d0>
    1872:	88 ec       	ldi	r24, 0xC8	; 200
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	9c 83       	std	Y+4, r25	; 0x04
    1878:	8b 83       	std	Y+3, r24	; 0x03
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	9c 81       	ldd	r25, Y+4	; 0x04
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	f1 f7       	brne	.-4      	; 0x187e <LCD_init+0x1be>
    1882:	9c 83       	std	Y+4, r25	; 0x04
    1884:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1886:	8d 81       	ldd	r24, Y+5	; 0x05
    1888:	9e 81       	ldd	r25, Y+6	; 0x06
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	9e 83       	std	Y+6, r25	; 0x06
    188e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1890:	8d 81       	ldd	r24, Y+5	; 0x05
    1892:	9e 81       	ldd	r25, Y+6	; 0x06
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	69 f7       	brne	.-38     	; 0x1872 <LCD_init+0x1b2>
    1898:	14 c0       	rjmp	.+40     	; 0x18c2 <LCD_init+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189a:	6f 81       	ldd	r22, Y+7	; 0x07
    189c:	78 85       	ldd	r23, Y+8	; 0x08
    189e:	89 85       	ldd	r24, Y+9	; 0x09
    18a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	9e 83       	std	Y+6, r25	; 0x06
    18ac:	8d 83       	std	Y+5, r24	; 0x05
    18ae:	8d 81       	ldd	r24, Y+5	; 0x05
    18b0:	9e 81       	ldd	r25, Y+6	; 0x06
    18b2:	9a 83       	std	Y+2, r25	; 0x02
    18b4:	89 83       	std	Y+1, r24	; 0x01
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <LCD_init+0x1fa>
    18be:	9a 83       	std	Y+2, r25	; 0x02
    18c0:	89 83       	std	Y+1, r24	; 0x01

	/* 3 - LCD Power ON delay always > 15ms */
	_delay_ms(20);

	/* 4 - send command 2 lines 8 bits*/
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    18c2:	88 e3       	ldi	r24, 0x38	; 56
    18c4:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif
	/* 5 - send command cursor off*/
	LCD_sendCommand(LCD_CURSOR_OFF);
    18c8:	8c e0       	ldi	r24, 0x0C	; 12
    18ca:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_sendCommand>

	/* 6 - send command clear screen */
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_sendCommand>
}
    18d4:	6c 96       	adiw	r28, 0x1c	; 28
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	c1 56       	subi	r28, 0x61	; 97
    18f4:	d0 40       	sbci	r29, 0x00	; 0
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	fe 01       	movw	r30, r28
    1902:	ef 59       	subi	r30, 0x9F	; 159
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	80 83       	st	Z, r24
	/* 1 - Clear RS */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,0);
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	60 e0       	ldi	r22, 0x00	; 0
    190c:	40 e0       	ldi	r20, 0x00	; 0
    190e:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,0);
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	61 e0       	ldi	r22, 0x01	; 1
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    191c:	fe 01       	movw	r30, r28
    191e:	e3 5a       	subi	r30, 0xA3	; 163
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	a0 e8       	ldi	r26, 0x80	; 128
    1928:	bf e3       	ldi	r27, 0x3F	; 63
    192a:	80 83       	st	Z, r24
    192c:	91 83       	std	Z+1, r25	; 0x01
    192e:	a2 83       	std	Z+2, r26	; 0x02
    1930:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1932:	8e 01       	movw	r16, r28
    1934:	07 5a       	subi	r16, 0xA7	; 167
    1936:	1f 4f       	sbci	r17, 0xFF	; 255
    1938:	fe 01       	movw	r30, r28
    193a:	e3 5a       	subi	r30, 0xA3	; 163
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	60 81       	ld	r22, Z
    1940:	71 81       	ldd	r23, Z+1	; 0x01
    1942:	82 81       	ldd	r24, Z+2	; 0x02
    1944:	93 81       	ldd	r25, Z+3	; 0x03
    1946:	2b ea       	ldi	r18, 0xAB	; 171
    1948:	3a ea       	ldi	r19, 0xAA	; 170
    194a:	4a e2       	ldi	r20, 0x2A	; 42
    194c:	50 e4       	ldi	r21, 0x40	; 64
    194e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	f8 01       	movw	r30, r16
    1958:	80 83       	st	Z, r24
    195a:	91 83       	std	Z+1, r25	; 0x01
    195c:	a2 83       	std	Z+2, r26	; 0x02
    195e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1960:	fe 01       	movw	r30, r28
    1962:	e7 5a       	subi	r30, 0xA7	; 167
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	60 81       	ld	r22, Z
    1968:	71 81       	ldd	r23, Z+1	; 0x01
    196a:	82 81       	ldd	r24, Z+2	; 0x02
    196c:	93 81       	ldd	r25, Z+3	; 0x03
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e8       	ldi	r20, 0x80	; 128
    1974:	5f e3       	ldi	r21, 0x3F	; 63
    1976:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    197a:	88 23       	and	r24, r24
    197c:	34 f4       	brge	.+12     	; 0x198a <LCD_sendCommand+0xa4>
		__ticks = 1;
    197e:	fe 01       	movw	r30, r28
    1980:	e8 5a       	subi	r30, 0xA8	; 168
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	80 83       	st	Z, r24
    1988:	e0 c0       	rjmp	.+448    	; 0x1b4a <LCD_sendCommand+0x264>
	else if (__tmp > 255)
    198a:	fe 01       	movw	r30, r28
    198c:	e7 5a       	subi	r30, 0xA7	; 167
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	60 81       	ld	r22, Z
    1992:	71 81       	ldd	r23, Z+1	; 0x01
    1994:	82 81       	ldd	r24, Z+2	; 0x02
    1996:	93 81       	ldd	r25, Z+3	; 0x03
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	4f e7       	ldi	r20, 0x7F	; 127
    199e:	53 e4       	ldi	r21, 0x43	; 67
    19a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19a4:	18 16       	cp	r1, r24
    19a6:	0c f0       	brlt	.+2      	; 0x19aa <LCD_sendCommand+0xc4>
    19a8:	c0 c0       	rjmp	.+384    	; 0x1b2a <LCD_sendCommand+0x244>
	{
		_delay_ms(__us / 1000.0);
    19aa:	fe 01       	movw	r30, r28
    19ac:	e3 5a       	subi	r30, 0xA3	; 163
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	60 81       	ld	r22, Z
    19b2:	71 81       	ldd	r23, Z+1	; 0x01
    19b4:	82 81       	ldd	r24, Z+2	; 0x02
    19b6:	93 81       	ldd	r25, Z+3	; 0x03
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	4a e7       	ldi	r20, 0x7A	; 122
    19be:	54 e4       	ldi	r21, 0x44	; 68
    19c0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	fe 01       	movw	r30, r28
    19ca:	ec 5a       	subi	r30, 0xAC	; 172
    19cc:	ff 4f       	sbci	r31, 0xFF	; 255
    19ce:	80 83       	st	Z, r24
    19d0:	91 83       	std	Z+1, r25	; 0x01
    19d2:	a2 83       	std	Z+2, r26	; 0x02
    19d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d6:	8e 01       	movw	r16, r28
    19d8:	00 5b       	subi	r16, 0xB0	; 176
    19da:	1f 4f       	sbci	r17, 0xFF	; 255
    19dc:	fe 01       	movw	r30, r28
    19de:	ec 5a       	subi	r30, 0xAC	; 172
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	60 81       	ld	r22, Z
    19e4:	71 81       	ldd	r23, Z+1	; 0x01
    19e6:	82 81       	ldd	r24, Z+2	; 0x02
    19e8:	93 81       	ldd	r25, Z+3	; 0x03
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	4a ef       	ldi	r20, 0xFA	; 250
    19f0:	54 e4       	ldi	r21, 0x44	; 68
    19f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	f8 01       	movw	r30, r16
    19fc:	80 83       	st	Z, r24
    19fe:	91 83       	std	Z+1, r25	; 0x01
    1a00:	a2 83       	std	Z+2, r26	; 0x02
    1a02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a04:	fe 01       	movw	r30, r28
    1a06:	e0 5b       	subi	r30, 0xB0	; 176
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	60 81       	ld	r22, Z
    1a0c:	71 81       	ldd	r23, Z+1	; 0x01
    1a0e:	82 81       	ldd	r24, Z+2	; 0x02
    1a10:	93 81       	ldd	r25, Z+3	; 0x03
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e8       	ldi	r20, 0x80	; 128
    1a18:	5f e3       	ldi	r21, 0x3F	; 63
    1a1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a1e:	88 23       	and	r24, r24
    1a20:	44 f4       	brge	.+16     	; 0x1a32 <LCD_sendCommand+0x14c>
		__ticks = 1;
    1a22:	fe 01       	movw	r30, r28
    1a24:	e2 5b       	subi	r30, 0xB2	; 178
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	91 83       	std	Z+1, r25	; 0x01
    1a2e:	80 83       	st	Z, r24
    1a30:	64 c0       	rjmp	.+200    	; 0x1afa <LCD_sendCommand+0x214>
	else if (__tmp > 65535)
    1a32:	fe 01       	movw	r30, r28
    1a34:	e0 5b       	subi	r30, 0xB0	; 176
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	60 81       	ld	r22, Z
    1a3a:	71 81       	ldd	r23, Z+1	; 0x01
    1a3c:	82 81       	ldd	r24, Z+2	; 0x02
    1a3e:	93 81       	ldd	r25, Z+3	; 0x03
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	3f ef       	ldi	r19, 0xFF	; 255
    1a44:	4f e7       	ldi	r20, 0x7F	; 127
    1a46:	57 e4       	ldi	r21, 0x47	; 71
    1a48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a4c:	18 16       	cp	r1, r24
    1a4e:	0c f0       	brlt	.+2      	; 0x1a52 <LCD_sendCommand+0x16c>
    1a50:	43 c0       	rjmp	.+134    	; 0x1ad8 <LCD_sendCommand+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a52:	fe 01       	movw	r30, r28
    1a54:	ec 5a       	subi	r30, 0xAC	; 172
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	60 81       	ld	r22, Z
    1a5a:	71 81       	ldd	r23, Z+1	; 0x01
    1a5c:	82 81       	ldd	r24, Z+2	; 0x02
    1a5e:	93 81       	ldd	r25, Z+3	; 0x03
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e2       	ldi	r20, 0x20	; 32
    1a66:	51 e4       	ldi	r21, 0x41	; 65
    1a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	8e 01       	movw	r16, r28
    1a72:	02 5b       	subi	r16, 0xB2	; 178
    1a74:	1f 4f       	sbci	r17, 0xFF	; 255
    1a76:	bc 01       	movw	r22, r24
    1a78:	cd 01       	movw	r24, r26
    1a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	f8 01       	movw	r30, r16
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	80 83       	st	Z, r24
    1a88:	1f c0       	rjmp	.+62     	; 0x1ac8 <LCD_sendCommand+0x1e2>
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	e4 5b       	subi	r30, 0xB4	; 180
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	88 ec       	ldi	r24, 0xC8	; 200
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	91 83       	std	Z+1, r25	; 0x01
    1a96:	80 83       	st	Z, r24
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e4 5b       	subi	r30, 0xB4	; 180
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	80 81       	ld	r24, Z
    1aa0:	91 81       	ldd	r25, Z+1	; 0x01
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	f1 f7       	brne	.-4      	; 0x1aa2 <LCD_sendCommand+0x1bc>
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	e4 5b       	subi	r30, 0xB4	; 180
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	91 83       	std	Z+1, r25	; 0x01
    1aae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab0:	de 01       	movw	r26, r28
    1ab2:	a2 5b       	subi	r26, 0xB2	; 178
    1ab4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e2 5b       	subi	r30, 0xB2	; 178
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	80 81       	ld	r24, Z
    1abe:	91 81       	ldd	r25, Z+1	; 0x01
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	11 96       	adiw	r26, 0x01	; 1
    1ac4:	9c 93       	st	X, r25
    1ac6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac8:	fe 01       	movw	r30, r28
    1aca:	e2 5b       	subi	r30, 0xB2	; 178
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	80 81       	ld	r24, Z
    1ad0:	91 81       	ldd	r25, Z+1	; 0x01
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	d1 f6       	brne	.-76     	; 0x1a8a <LCD_sendCommand+0x1a4>
    1ad6:	4b c0       	rjmp	.+150    	; 0x1b6e <LCD_sendCommand+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad8:	8e 01       	movw	r16, r28
    1ada:	02 5b       	subi	r16, 0xB2	; 178
    1adc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ade:	fe 01       	movw	r30, r28
    1ae0:	e0 5b       	subi	r30, 0xB0	; 176
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	60 81       	ld	r22, Z
    1ae6:	71 81       	ldd	r23, Z+1	; 0x01
    1ae8:	82 81       	ldd	r24, Z+2	; 0x02
    1aea:	93 81       	ldd	r25, Z+3	; 0x03
    1aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	f8 01       	movw	r30, r16
    1af6:	91 83       	std	Z+1, r25	; 0x01
    1af8:	80 83       	st	Z, r24
    1afa:	de 01       	movw	r26, r28
    1afc:	a6 5b       	subi	r26, 0xB6	; 182
    1afe:	bf 4f       	sbci	r27, 0xFF	; 255
    1b00:	fe 01       	movw	r30, r28
    1b02:	e2 5b       	subi	r30, 0xB2	; 178
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	80 81       	ld	r24, Z
    1b08:	91 81       	ldd	r25, Z+1	; 0x01
    1b0a:	11 96       	adiw	r26, 0x01	; 1
    1b0c:	9c 93       	st	X, r25
    1b0e:	8e 93       	st	-X, r24
    1b10:	fe 01       	movw	r30, r28
    1b12:	e6 5b       	subi	r30, 0xB6	; 182
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	80 81       	ld	r24, Z
    1b18:	91 81       	ldd	r25, Z+1	; 0x01
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	f1 f7       	brne	.-4      	; 0x1b1a <LCD_sendCommand+0x234>
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e6 5b       	subi	r30, 0xB6	; 182
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	91 83       	std	Z+1, r25	; 0x01
    1b26:	80 83       	st	Z, r24
    1b28:	22 c0       	rjmp	.+68     	; 0x1b6e <LCD_sendCommand+0x288>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b2a:	8e 01       	movw	r16, r28
    1b2c:	08 5a       	subi	r16, 0xA8	; 168
    1b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b30:	fe 01       	movw	r30, r28
    1b32:	e7 5a       	subi	r30, 0xA7	; 167
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	60 81       	ld	r22, Z
    1b38:	71 81       	ldd	r23, Z+1	; 0x01
    1b3a:	82 81       	ldd	r24, Z+2	; 0x02
    1b3c:	93 81       	ldd	r25, Z+3	; 0x03
    1b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	f8 01       	movw	r30, r16
    1b48:	80 83       	st	Z, r24
    1b4a:	de 01       	movw	r26, r28
    1b4c:	a7 5b       	subi	r26, 0xB7	; 183
    1b4e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b50:	fe 01       	movw	r30, r28
    1b52:	e8 5a       	subi	r30, 0xA8	; 168
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	80 81       	ld	r24, Z
    1b58:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	e7 5b       	subi	r30, 0xB7	; 183
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	80 81       	ld	r24, Z
    1b62:	8a 95       	dec	r24
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <LCD_sendCommand+0x27c>
    1b66:	fe 01       	movw	r30, r28
    1b68:	e7 5b       	subi	r30, 0xB7	; 183
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_us(1);

	/* 3 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	62 e0       	ldi	r22, 0x02	; 2
    1b72:	41 e0       	ldi	r20, 0x01	; 1
    1b74:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    1b78:	fe 01       	movw	r30, r28
    1b7a:	eb 5b       	subi	r30, 0xBB	; 187
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a0 e8       	ldi	r26, 0x80	; 128
    1b84:	bf e3       	ldi	r27, 0x3F	; 63
    1b86:	80 83       	st	Z, r24
    1b88:	91 83       	std	Z+1, r25	; 0x01
    1b8a:	a2 83       	std	Z+2, r26	; 0x02
    1b8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b8e:	8e 01       	movw	r16, r28
    1b90:	0f 5b       	subi	r16, 0xBF	; 191
    1b92:	1f 4f       	sbci	r17, 0xFF	; 255
    1b94:	fe 01       	movw	r30, r28
    1b96:	eb 5b       	subi	r30, 0xBB	; 187
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	60 81       	ld	r22, Z
    1b9c:	71 81       	ldd	r23, Z+1	; 0x01
    1b9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ba0:	93 81       	ldd	r25, Z+3	; 0x03
    1ba2:	2b ea       	ldi	r18, 0xAB	; 171
    1ba4:	3a ea       	ldi	r19, 0xAA	; 170
    1ba6:	4a e2       	ldi	r20, 0x2A	; 42
    1ba8:	50 e4       	ldi	r21, 0x40	; 64
    1baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	f8 01       	movw	r30, r16
    1bb4:	80 83       	st	Z, r24
    1bb6:	91 83       	std	Z+1, r25	; 0x01
    1bb8:	a2 83       	std	Z+2, r26	; 0x02
    1bba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	ef 5b       	subi	r30, 0xBF	; 191
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	60 81       	ld	r22, Z
    1bc4:	71 81       	ldd	r23, Z+1	; 0x01
    1bc6:	82 81       	ldd	r24, Z+2	; 0x02
    1bc8:	93 81       	ldd	r25, Z+3	; 0x03
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e8       	ldi	r20, 0x80	; 128
    1bd0:	5f e3       	ldi	r21, 0x3F	; 63
    1bd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bd6:	88 23       	and	r24, r24
    1bd8:	34 f4       	brge	.+12     	; 0x1be6 <LCD_sendCommand+0x300>
		__ticks = 1;
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	fe 01       	movw	r30, r28
    1bde:	e0 5c       	subi	r30, 0xC0	; 192
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	80 83       	st	Z, r24
    1be4:	9d c0       	rjmp	.+314    	; 0x1d20 <LCD_sendCommand+0x43a>
	else if (__tmp > 255)
    1be6:	fe 01       	movw	r30, r28
    1be8:	ef 5b       	subi	r30, 0xBF	; 191
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	60 81       	ld	r22, Z
    1bee:	71 81       	ldd	r23, Z+1	; 0x01
    1bf0:	82 81       	ldd	r24, Z+2	; 0x02
    1bf2:	93 81       	ldd	r25, Z+3	; 0x03
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	4f e7       	ldi	r20, 0x7F	; 127
    1bfa:	53 e4       	ldi	r21, 0x43	; 67
    1bfc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c00:	18 16       	cp	r1, r24
    1c02:	0c f0       	brlt	.+2      	; 0x1c06 <LCD_sendCommand+0x320>
    1c04:	7e c0       	rjmp	.+252    	; 0x1d02 <LCD_sendCommand+0x41c>
	{
		_delay_ms(__us / 1000.0);
    1c06:	fe 01       	movw	r30, r28
    1c08:	eb 5b       	subi	r30, 0xBB	; 187
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	60 81       	ld	r22, Z
    1c0e:	71 81       	ldd	r23, Z+1	; 0x01
    1c10:	82 81       	ldd	r24, Z+2	; 0x02
    1c12:	93 81       	ldd	r25, Z+3	; 0x03
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	4a e7       	ldi	r20, 0x7A	; 122
    1c1a:	54 e4       	ldi	r21, 0x44	; 68
    1c1c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	8c af       	std	Y+60, r24	; 0x3c
    1c26:	9d af       	std	Y+61, r25	; 0x3d
    1c28:	ae af       	std	Y+62, r26	; 0x3e
    1c2a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c2e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c30:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c32:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	4a ef       	ldi	r20, 0xFA	; 250
    1c3a:	54 e4       	ldi	r21, 0x44	; 68
    1c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	88 af       	std	Y+56, r24	; 0x38
    1c46:	99 af       	std	Y+57, r25	; 0x39
    1c48:	aa af       	std	Y+58, r26	; 0x3a
    1c4a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1c4c:	68 ad       	ldd	r22, Y+56	; 0x38
    1c4e:	79 ad       	ldd	r23, Y+57	; 0x39
    1c50:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c52:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e8       	ldi	r20, 0x80	; 128
    1c5a:	5f e3       	ldi	r21, 0x3F	; 63
    1c5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c60:	88 23       	and	r24, r24
    1c62:	2c f4       	brge	.+10     	; 0x1c6e <LCD_sendCommand+0x388>
		__ticks = 1;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	9f ab       	std	Y+55, r25	; 0x37
    1c6a:	8e ab       	std	Y+54, r24	; 0x36
    1c6c:	3f c0       	rjmp	.+126    	; 0x1cec <LCD_sendCommand+0x406>
	else if (__tmp > 65535)
    1c6e:	68 ad       	ldd	r22, Y+56	; 0x38
    1c70:	79 ad       	ldd	r23, Y+57	; 0x39
    1c72:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c74:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	3f ef       	ldi	r19, 0xFF	; 255
    1c7a:	4f e7       	ldi	r20, 0x7F	; 127
    1c7c:	57 e4       	ldi	r21, 0x47	; 71
    1c7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c82:	18 16       	cp	r1, r24
    1c84:	4c f5       	brge	.+82     	; 0x1cd8 <LCD_sendCommand+0x3f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c86:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c88:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c8a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c8c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e2       	ldi	r20, 0x20	; 32
    1c94:	51 e4       	ldi	r21, 0x41	; 65
    1c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	bc 01       	movw	r22, r24
    1ca0:	cd 01       	movw	r24, r26
    1ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	9f ab       	std	Y+55, r25	; 0x37
    1cac:	8e ab       	std	Y+54, r24	; 0x36
    1cae:	0f c0       	rjmp	.+30     	; 0x1cce <LCD_sendCommand+0x3e8>
    1cb0:	88 ec       	ldi	r24, 0xC8	; 200
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	9d ab       	std	Y+53, r25	; 0x35
    1cb6:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cb8:	8c a9       	ldd	r24, Y+52	; 0x34
    1cba:	9d a9       	ldd	r25, Y+53	; 0x35
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <LCD_sendCommand+0x3d6>
    1cc0:	9d ab       	std	Y+53, r25	; 0x35
    1cc2:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc4:	8e a9       	ldd	r24, Y+54	; 0x36
    1cc6:	9f a9       	ldd	r25, Y+55	; 0x37
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	9f ab       	std	Y+55, r25	; 0x37
    1ccc:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cce:	8e a9       	ldd	r24, Y+54	; 0x36
    1cd0:	9f a9       	ldd	r25, Y+55	; 0x37
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	69 f7       	brne	.-38     	; 0x1cb0 <LCD_sendCommand+0x3ca>
    1cd6:	2d c0       	rjmp	.+90     	; 0x1d32 <LCD_sendCommand+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd8:	68 ad       	ldd	r22, Y+56	; 0x38
    1cda:	79 ad       	ldd	r23, Y+57	; 0x39
    1cdc:	8a ad       	ldd	r24, Y+58	; 0x3a
    1cde:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	9f ab       	std	Y+55, r25	; 0x37
    1cea:	8e ab       	std	Y+54, r24	; 0x36
    1cec:	8e a9       	ldd	r24, Y+54	; 0x36
    1cee:	9f a9       	ldd	r25, Y+55	; 0x37
    1cf0:	9b ab       	std	Y+51, r25	; 0x33
    1cf2:	8a ab       	std	Y+50, r24	; 0x32
    1cf4:	8a a9       	ldd	r24, Y+50	; 0x32
    1cf6:	9b a9       	ldd	r25, Y+51	; 0x33
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <LCD_sendCommand+0x412>
    1cfc:	9b ab       	std	Y+51, r25	; 0x33
    1cfe:	8a ab       	std	Y+50, r24	; 0x32
    1d00:	18 c0       	rjmp	.+48     	; 0x1d32 <LCD_sendCommand+0x44c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d02:	fe 01       	movw	r30, r28
    1d04:	ef 5b       	subi	r30, 0xBF	; 191
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	60 81       	ld	r22, Z
    1d0a:	71 81       	ldd	r23, Z+1	; 0x01
    1d0c:	82 81       	ldd	r24, Z+2	; 0x02
    1d0e:	93 81       	ldd	r25, Z+3	; 0x03
    1d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e0 5c       	subi	r30, 0xC0	; 192
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	80 83       	st	Z, r24
    1d20:	fe 01       	movw	r30, r28
    1d22:	e0 5c       	subi	r30, 0xC0	; 192
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	80 81       	ld	r24, Z
    1d28:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d2a:	89 a9       	ldd	r24, Y+49	; 0x31
    1d2c:	8a 95       	dec	r24
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <LCD_sendCommand+0x446>
    1d30:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);

	#if(LCD_BIT_MODE == 8)

	/* 5 - send our command */
	GPIO_writePort(LCD_DATA_PORT_ID,command);
    1d32:	fe 01       	movw	r30, r28
    1d34:	ef 59       	subi	r30, 0x9F	; 159
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	60 81       	ld	r22, Z
    1d3c:	0e 94 66 08 	call	0x10cc	; 0x10cc <GPIO_writePort>
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	a0 e8       	ldi	r26, 0x80	; 128
    1d46:	bf e3       	ldi	r27, 0x3F	; 63
    1d48:	8d a7       	std	Y+45, r24	; 0x2d
    1d4a:	9e a7       	std	Y+46, r25	; 0x2e
    1d4c:	af a7       	std	Y+47, r26	; 0x2f
    1d4e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d50:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d52:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d54:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d56:	98 a9       	ldd	r25, Y+48	; 0x30
    1d58:	2b ea       	ldi	r18, 0xAB	; 171
    1d5a:	3a ea       	ldi	r19, 0xAA	; 170
    1d5c:	4a e2       	ldi	r20, 0x2A	; 42
    1d5e:	50 e4       	ldi	r21, 0x40	; 64
    1d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	89 a7       	std	Y+41, r24	; 0x29
    1d6a:	9a a7       	std	Y+42, r25	; 0x2a
    1d6c:	ab a7       	std	Y+43, r26	; 0x2b
    1d6e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1d70:	69 a5       	ldd	r22, Y+41	; 0x29
    1d72:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d74:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d76:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e8       	ldi	r20, 0x80	; 128
    1d7e:	5f e3       	ldi	r21, 0x3F	; 63
    1d80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d84:	88 23       	and	r24, r24
    1d86:	1c f4       	brge	.+6      	; 0x1d8e <LCD_sendCommand+0x4a8>
		__ticks = 1;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	88 a7       	std	Y+40, r24	; 0x28
    1d8c:	91 c0       	rjmp	.+290    	; 0x1eb0 <LCD_sendCommand+0x5ca>
	else if (__tmp > 255)
    1d8e:	69 a5       	ldd	r22, Y+41	; 0x29
    1d90:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d92:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d94:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	4f e7       	ldi	r20, 0x7F	; 127
    1d9c:	53 e4       	ldi	r21, 0x43	; 67
    1d9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1da2:	18 16       	cp	r1, r24
    1da4:	0c f0       	brlt	.+2      	; 0x1da8 <LCD_sendCommand+0x4c2>
    1da6:	7b c0       	rjmp	.+246    	; 0x1e9e <LCD_sendCommand+0x5b8>
	{
		_delay_ms(__us / 1000.0);
    1da8:	6d a5       	ldd	r22, Y+45	; 0x2d
    1daa:	7e a5       	ldd	r23, Y+46	; 0x2e
    1dac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dae:	98 a9       	ldd	r25, Y+48	; 0x30
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	4a e7       	ldi	r20, 0x7A	; 122
    1db6:	54 e4       	ldi	r21, 0x44	; 68
    1db8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	8c a3       	std	Y+36, r24	; 0x24
    1dc2:	9d a3       	std	Y+37, r25	; 0x25
    1dc4:	ae a3       	std	Y+38, r26	; 0x26
    1dc6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc8:	6c a1       	ldd	r22, Y+36	; 0x24
    1dca:	7d a1       	ldd	r23, Y+37	; 0x25
    1dcc:	8e a1       	ldd	r24, Y+38	; 0x26
    1dce:	9f a1       	ldd	r25, Y+39	; 0x27
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	4a ef       	ldi	r20, 0xFA	; 250
    1dd6:	54 e4       	ldi	r21, 0x44	; 68
    1dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	88 a3       	std	Y+32, r24	; 0x20
    1de2:	99 a3       	std	Y+33, r25	; 0x21
    1de4:	aa a3       	std	Y+34, r26	; 0x22
    1de6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1de8:	68 a1       	ldd	r22, Y+32	; 0x20
    1dea:	79 a1       	ldd	r23, Y+33	; 0x21
    1dec:	8a a1       	ldd	r24, Y+34	; 0x22
    1dee:	9b a1       	ldd	r25, Y+35	; 0x23
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	40 e8       	ldi	r20, 0x80	; 128
    1df6:	5f e3       	ldi	r21, 0x3F	; 63
    1df8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dfc:	88 23       	and	r24, r24
    1dfe:	2c f4       	brge	.+10     	; 0x1e0a <LCD_sendCommand+0x524>
		__ticks = 1;
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	9f 8f       	std	Y+31, r25	; 0x1f
    1e06:	8e 8f       	std	Y+30, r24	; 0x1e
    1e08:	3f c0       	rjmp	.+126    	; 0x1e88 <LCD_sendCommand+0x5a2>
	else if (__tmp > 65535)
    1e0a:	68 a1       	ldd	r22, Y+32	; 0x20
    1e0c:	79 a1       	ldd	r23, Y+33	; 0x21
    1e0e:	8a a1       	ldd	r24, Y+34	; 0x22
    1e10:	9b a1       	ldd	r25, Y+35	; 0x23
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	3f ef       	ldi	r19, 0xFF	; 255
    1e16:	4f e7       	ldi	r20, 0x7F	; 127
    1e18:	57 e4       	ldi	r21, 0x47	; 71
    1e1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e1e:	18 16       	cp	r1, r24
    1e20:	4c f5       	brge	.+82     	; 0x1e74 <LCD_sendCommand+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e22:	6c a1       	ldd	r22, Y+36	; 0x24
    1e24:	7d a1       	ldd	r23, Y+37	; 0x25
    1e26:	8e a1       	ldd	r24, Y+38	; 0x26
    1e28:	9f a1       	ldd	r25, Y+39	; 0x27
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e2       	ldi	r20, 0x20	; 32
    1e30:	51 e4       	ldi	r21, 0x41	; 65
    1e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	bc 01       	movw	r22, r24
    1e3c:	cd 01       	movw	r24, r26
    1e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	9f 8f       	std	Y+31, r25	; 0x1f
    1e48:	8e 8f       	std	Y+30, r24	; 0x1e
    1e4a:	0f c0       	rjmp	.+30     	; 0x1e6a <LCD_sendCommand+0x584>
    1e4c:	88 ec       	ldi	r24, 0xC8	; 200
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	9d 8f       	std	Y+29, r25	; 0x1d
    1e52:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e54:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e56:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <LCD_sendCommand+0x572>
    1e5c:	9d 8f       	std	Y+29, r25	; 0x1d
    1e5e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e60:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e62:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	9f 8f       	std	Y+31, r25	; 0x1f
    1e68:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e6c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	69 f7       	brne	.-38     	; 0x1e4c <LCD_sendCommand+0x566>
    1e72:	24 c0       	rjmp	.+72     	; 0x1ebc <LCD_sendCommand+0x5d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e74:	68 a1       	ldd	r22, Y+32	; 0x20
    1e76:	79 a1       	ldd	r23, Y+33	; 0x21
    1e78:	8a a1       	ldd	r24, Y+34	; 0x22
    1e7a:	9b a1       	ldd	r25, Y+35	; 0x23
    1e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	9f 8f       	std	Y+31, r25	; 0x1f
    1e86:	8e 8f       	std	Y+30, r24	; 0x1e
    1e88:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e8a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e8c:	9b 8f       	std	Y+27, r25	; 0x1b
    1e8e:	8a 8f       	std	Y+26, r24	; 0x1a
    1e90:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e92:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	f1 f7       	brne	.-4      	; 0x1e94 <LCD_sendCommand+0x5ae>
    1e98:	9b 8f       	std	Y+27, r25	; 0x1b
    1e9a:	8a 8f       	std	Y+26, r24	; 0x1a
    1e9c:	0f c0       	rjmp	.+30     	; 0x1ebc <LCD_sendCommand+0x5d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e9e:	69 a5       	ldd	r22, Y+41	; 0x29
    1ea0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ea2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ea4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	88 a7       	std	Y+40, r24	; 0x28
    1eb0:	88 a5       	ldd	r24, Y+40	; 0x28
    1eb2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1eb4:	89 8d       	ldd	r24, Y+25	; 0x19
    1eb6:	8a 95       	dec	r24
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <LCD_sendCommand+0x5d0>
    1eba:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

	#endif

	/* 7 - clear enable*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	62 e0       	ldi	r22, 0x02	; 2
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	a0 e8       	ldi	r26, 0x80	; 128
    1ecc:	bf e3       	ldi	r27, 0x3F	; 63
    1ece:	8d 8b       	std	Y+21, r24	; 0x15
    1ed0:	9e 8b       	std	Y+22, r25	; 0x16
    1ed2:	af 8b       	std	Y+23, r26	; 0x17
    1ed4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ed6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed8:	7e 89       	ldd	r23, Y+22	; 0x16
    1eda:	8f 89       	ldd	r24, Y+23	; 0x17
    1edc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ede:	2b ea       	ldi	r18, 0xAB	; 171
    1ee0:	3a ea       	ldi	r19, 0xAA	; 170
    1ee2:	4a e2       	ldi	r20, 0x2A	; 42
    1ee4:	50 e4       	ldi	r21, 0x40	; 64
    1ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	89 8b       	std	Y+17, r24	; 0x11
    1ef0:	9a 8b       	std	Y+18, r25	; 0x12
    1ef2:	ab 8b       	std	Y+19, r26	; 0x13
    1ef4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ef6:	69 89       	ldd	r22, Y+17	; 0x11
    1ef8:	7a 89       	ldd	r23, Y+18	; 0x12
    1efa:	8b 89       	ldd	r24, Y+19	; 0x13
    1efc:	9c 89       	ldd	r25, Y+20	; 0x14
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e8       	ldi	r20, 0x80	; 128
    1f04:	5f e3       	ldi	r21, 0x3F	; 63
    1f06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f0a:	88 23       	and	r24, r24
    1f0c:	1c f4       	brge	.+6      	; 0x1f14 <LCD_sendCommand+0x62e>
		__ticks = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	88 8b       	std	Y+16, r24	; 0x10
    1f12:	91 c0       	rjmp	.+290    	; 0x2036 <LCD_sendCommand+0x750>
	else if (__tmp > 255)
    1f14:	69 89       	ldd	r22, Y+17	; 0x11
    1f16:	7a 89       	ldd	r23, Y+18	; 0x12
    1f18:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	4f e7       	ldi	r20, 0x7F	; 127
    1f22:	53 e4       	ldi	r21, 0x43	; 67
    1f24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f28:	18 16       	cp	r1, r24
    1f2a:	0c f0       	brlt	.+2      	; 0x1f2e <LCD_sendCommand+0x648>
    1f2c:	7b c0       	rjmp	.+246    	; 0x2024 <LCD_sendCommand+0x73e>
	{
		_delay_ms(__us / 1000.0);
    1f2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f30:	7e 89       	ldd	r23, Y+22	; 0x16
    1f32:	8f 89       	ldd	r24, Y+23	; 0x17
    1f34:	98 8d       	ldd	r25, Y+24	; 0x18
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	4a e7       	ldi	r20, 0x7A	; 122
    1f3c:	54 e4       	ldi	r21, 0x44	; 68
    1f3e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	8c 87       	std	Y+12, r24	; 0x0c
    1f48:	9d 87       	std	Y+13, r25	; 0x0d
    1f4a:	ae 87       	std	Y+14, r26	; 0x0e
    1f4c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f50:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f52:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f54:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	4a ef       	ldi	r20, 0xFA	; 250
    1f5c:	54 e4       	ldi	r21, 0x44	; 68
    1f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	88 87       	std	Y+8, r24	; 0x08
    1f68:	99 87       	std	Y+9, r25	; 0x09
    1f6a:	aa 87       	std	Y+10, r26	; 0x0a
    1f6c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f6e:	68 85       	ldd	r22, Y+8	; 0x08
    1f70:	79 85       	ldd	r23, Y+9	; 0x09
    1f72:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f74:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	40 e8       	ldi	r20, 0x80	; 128
    1f7c:	5f e3       	ldi	r21, 0x3F	; 63
    1f7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f82:	88 23       	and	r24, r24
    1f84:	2c f4       	brge	.+10     	; 0x1f90 <LCD_sendCommand+0x6aa>
		__ticks = 1;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	9f 83       	std	Y+7, r25	; 0x07
    1f8c:	8e 83       	std	Y+6, r24	; 0x06
    1f8e:	3f c0       	rjmp	.+126    	; 0x200e <LCD_sendCommand+0x728>
	else if (__tmp > 65535)
    1f90:	68 85       	ldd	r22, Y+8	; 0x08
    1f92:	79 85       	ldd	r23, Y+9	; 0x09
    1f94:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f96:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	3f ef       	ldi	r19, 0xFF	; 255
    1f9c:	4f e7       	ldi	r20, 0x7F	; 127
    1f9e:	57 e4       	ldi	r21, 0x47	; 71
    1fa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fa4:	18 16       	cp	r1, r24
    1fa6:	4c f5       	brge	.+82     	; 0x1ffa <LCD_sendCommand+0x714>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1faa:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fac:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fae:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e2       	ldi	r20, 0x20	; 32
    1fb6:	51 e4       	ldi	r21, 0x41	; 65
    1fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	bc 01       	movw	r22, r24
    1fc2:	cd 01       	movw	r24, r26
    1fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	9f 83       	std	Y+7, r25	; 0x07
    1fce:	8e 83       	std	Y+6, r24	; 0x06
    1fd0:	0f c0       	rjmp	.+30     	; 0x1ff0 <LCD_sendCommand+0x70a>
    1fd2:	88 ec       	ldi	r24, 0xC8	; 200
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	9d 83       	std	Y+5, r25	; 0x05
    1fd8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fda:	8c 81       	ldd	r24, Y+4	; 0x04
    1fdc:	9d 81       	ldd	r25, Y+5	; 0x05
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <LCD_sendCommand+0x6f8>
    1fe2:	9d 83       	std	Y+5, r25	; 0x05
    1fe4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe6:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe8:	9f 81       	ldd	r25, Y+7	; 0x07
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	9f 83       	std	Y+7, r25	; 0x07
    1fee:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	69 f7       	brne	.-38     	; 0x1fd2 <LCD_sendCommand+0x6ec>
    1ff8:	24 c0       	rjmp	.+72     	; 0x2042 <LCD_sendCommand+0x75c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffa:	68 85       	ldd	r22, Y+8	; 0x08
    1ffc:	79 85       	ldd	r23, Y+9	; 0x09
    1ffe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2000:	9b 85       	ldd	r25, Y+11	; 0x0b
    2002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	9f 83       	std	Y+7, r25	; 0x07
    200c:	8e 83       	std	Y+6, r24	; 0x06
    200e:	8e 81       	ldd	r24, Y+6	; 0x06
    2010:	9f 81       	ldd	r25, Y+7	; 0x07
    2012:	9b 83       	std	Y+3, r25	; 0x03
    2014:	8a 83       	std	Y+2, r24	; 0x02
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	9b 81       	ldd	r25, Y+3	; 0x03
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <LCD_sendCommand+0x734>
    201e:	9b 83       	std	Y+3, r25	; 0x03
    2020:	8a 83       	std	Y+2, r24	; 0x02
    2022:	0f c0       	rjmp	.+30     	; 0x2042 <LCD_sendCommand+0x75c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2024:	69 89       	ldd	r22, Y+17	; 0x11
    2026:	7a 89       	ldd	r23, Y+18	; 0x12
    2028:	8b 89       	ldd	r24, Y+19	; 0x13
    202a:	9c 89       	ldd	r25, Y+20	; 0x14
    202c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	88 8b       	std	Y+16, r24	; 0x10
    2036:	88 89       	ldd	r24, Y+16	; 0x10
    2038:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	8a 95       	dec	r24
    203e:	f1 f7       	brne	.-4      	; 0x203c <LCD_sendCommand+0x756>
    2040:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    2042:	cf 59       	subi	r28, 0x9F	; 159
    2044:	df 4f       	sbci	r29, 0xFF	; 255
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	1f 91       	pop	r17
    2056:	0f 91       	pop	r16
    2058:	08 95       	ret

0000205a <LCD_displayCharacter>:
/*
 * Description :
 * Send the required data to the screen
 */
void LCD_displayCharacter(uint8 data)
{
    205a:	0f 93       	push	r16
    205c:	1f 93       	push	r17
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
    2066:	cd 54       	subi	r28, 0x4D	; 77
    2068:	d0 40       	sbci	r29, 0x00	; 0
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	f8 94       	cli
    206e:	de bf       	out	0x3e, r29	; 62
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	cd bf       	out	0x3d, r28	; 61
    2074:	fe 01       	movw	r30, r28
    2076:	e3 5b       	subi	r30, 0xB3	; 179
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	80 83       	st	Z, r24
	/* 1 - set RS */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,1);
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	60 e0       	ldi	r22, 0x00	; 0
    2080:	41 e0       	ldi	r20, 0x01	; 1
    2082:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,0);
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	61 e0       	ldi	r22, 0x01	; 1
    208a:	40 e0       	ldi	r20, 0x00	; 0
    208c:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    2090:	fe 01       	movw	r30, r28
    2092:	e7 5b       	subi	r30, 0xB7	; 183
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	a0 e8       	ldi	r26, 0x80	; 128
    209c:	bf e3       	ldi	r27, 0x3F	; 63
    209e:	80 83       	st	Z, r24
    20a0:	91 83       	std	Z+1, r25	; 0x01
    20a2:	a2 83       	std	Z+2, r26	; 0x02
    20a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a6:	8e 01       	movw	r16, r28
    20a8:	0b 5b       	subi	r16, 0xBB	; 187
    20aa:	1f 4f       	sbci	r17, 0xFF	; 255
    20ac:	fe 01       	movw	r30, r28
    20ae:	e7 5b       	subi	r30, 0xB7	; 183
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	60 81       	ld	r22, Z
    20b4:	71 81       	ldd	r23, Z+1	; 0x01
    20b6:	82 81       	ldd	r24, Z+2	; 0x02
    20b8:	93 81       	ldd	r25, Z+3	; 0x03
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	4a ef       	ldi	r20, 0xFA	; 250
    20c0:	54 e4       	ldi	r21, 0x44	; 68
    20c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	f8 01       	movw	r30, r16
    20cc:	80 83       	st	Z, r24
    20ce:	91 83       	std	Z+1, r25	; 0x01
    20d0:	a2 83       	std	Z+2, r26	; 0x02
    20d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20d4:	fe 01       	movw	r30, r28
    20d6:	eb 5b       	subi	r30, 0xBB	; 187
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	60 81       	ld	r22, Z
    20dc:	71 81       	ldd	r23, Z+1	; 0x01
    20de:	82 81       	ldd	r24, Z+2	; 0x02
    20e0:	93 81       	ldd	r25, Z+3	; 0x03
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	40 e8       	ldi	r20, 0x80	; 128
    20e8:	5f e3       	ldi	r21, 0x3F	; 63
    20ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20ee:	88 23       	and	r24, r24
    20f0:	44 f4       	brge	.+16     	; 0x2102 <LCD_displayCharacter+0xa8>
		__ticks = 1;
    20f2:	fe 01       	movw	r30, r28
    20f4:	ed 5b       	subi	r30, 0xBD	; 189
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	91 83       	std	Z+1, r25	; 0x01
    20fe:	80 83       	st	Z, r24
    2100:	64 c0       	rjmp	.+200    	; 0x21ca <LCD_displayCharacter+0x170>
	else if (__tmp > 65535)
    2102:	fe 01       	movw	r30, r28
    2104:	eb 5b       	subi	r30, 0xBB	; 187
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	60 81       	ld	r22, Z
    210a:	71 81       	ldd	r23, Z+1	; 0x01
    210c:	82 81       	ldd	r24, Z+2	; 0x02
    210e:	93 81       	ldd	r25, Z+3	; 0x03
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	3f ef       	ldi	r19, 0xFF	; 255
    2114:	4f e7       	ldi	r20, 0x7F	; 127
    2116:	57 e4       	ldi	r21, 0x47	; 71
    2118:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    211c:	18 16       	cp	r1, r24
    211e:	0c f0       	brlt	.+2      	; 0x2122 <LCD_displayCharacter+0xc8>
    2120:	43 c0       	rjmp	.+134    	; 0x21a8 <LCD_displayCharacter+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2122:	fe 01       	movw	r30, r28
    2124:	e7 5b       	subi	r30, 0xB7	; 183
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	60 81       	ld	r22, Z
    212a:	71 81       	ldd	r23, Z+1	; 0x01
    212c:	82 81       	ldd	r24, Z+2	; 0x02
    212e:	93 81       	ldd	r25, Z+3	; 0x03
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e2       	ldi	r20, 0x20	; 32
    2136:	51 e4       	ldi	r21, 0x41	; 65
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	8e 01       	movw	r16, r28
    2142:	0d 5b       	subi	r16, 0xBD	; 189
    2144:	1f 4f       	sbci	r17, 0xFF	; 255
    2146:	bc 01       	movw	r22, r24
    2148:	cd 01       	movw	r24, r26
    214a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	f8 01       	movw	r30, r16
    2154:	91 83       	std	Z+1, r25	; 0x01
    2156:	80 83       	st	Z, r24
    2158:	1f c0       	rjmp	.+62     	; 0x2198 <LCD_displayCharacter+0x13e>
    215a:	fe 01       	movw	r30, r28
    215c:	ef 5b       	subi	r30, 0xBF	; 191
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	88 ec       	ldi	r24, 0xC8	; 200
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	91 83       	std	Z+1, r25	; 0x01
    2166:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2168:	fe 01       	movw	r30, r28
    216a:	ef 5b       	subi	r30, 0xBF	; 191
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	80 81       	ld	r24, Z
    2170:	91 81       	ldd	r25, Z+1	; 0x01
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	f1 f7       	brne	.-4      	; 0x2172 <LCD_displayCharacter+0x118>
    2176:	fe 01       	movw	r30, r28
    2178:	ef 5b       	subi	r30, 0xBF	; 191
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	91 83       	std	Z+1, r25	; 0x01
    217e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2180:	de 01       	movw	r26, r28
    2182:	ad 5b       	subi	r26, 0xBD	; 189
    2184:	bf 4f       	sbci	r27, 0xFF	; 255
    2186:	fe 01       	movw	r30, r28
    2188:	ed 5b       	subi	r30, 0xBD	; 189
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	80 81       	ld	r24, Z
    218e:	91 81       	ldd	r25, Z+1	; 0x01
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	11 96       	adiw	r26, 0x01	; 1
    2194:	9c 93       	st	X, r25
    2196:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2198:	fe 01       	movw	r30, r28
    219a:	ed 5b       	subi	r30, 0xBD	; 189
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	80 81       	ld	r24, Z
    21a0:	91 81       	ldd	r25, Z+1	; 0x01
    21a2:	00 97       	sbiw	r24, 0x00	; 0
    21a4:	d1 f6       	brne	.-76     	; 0x215a <LCD_displayCharacter+0x100>
    21a6:	24 c0       	rjmp	.+72     	; 0x21f0 <LCD_displayCharacter+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a8:	8e 01       	movw	r16, r28
    21aa:	0d 5b       	subi	r16, 0xBD	; 189
    21ac:	1f 4f       	sbci	r17, 0xFF	; 255
    21ae:	fe 01       	movw	r30, r28
    21b0:	eb 5b       	subi	r30, 0xBB	; 187
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	60 81       	ld	r22, Z
    21b6:	71 81       	ldd	r23, Z+1	; 0x01
    21b8:	82 81       	ldd	r24, Z+2	; 0x02
    21ba:	93 81       	ldd	r25, Z+3	; 0x03
    21bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	f8 01       	movw	r30, r16
    21c6:	91 83       	std	Z+1, r25	; 0x01
    21c8:	80 83       	st	Z, r24
    21ca:	fe 01       	movw	r30, r28
    21cc:	ed 5b       	subi	r30, 0xBD	; 189
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 81       	ld	r24, Z
    21d2:	91 81       	ldd	r25, Z+1	; 0x01
    21d4:	fe 01       	movw	r30, r28
    21d6:	ff 96       	adiw	r30, 0x3f	; 63
    21d8:	91 83       	std	Z+1, r25	; 0x01
    21da:	80 83       	st	Z, r24
    21dc:	fe 01       	movw	r30, r28
    21de:	ff 96       	adiw	r30, 0x3f	; 63
    21e0:	80 81       	ld	r24, Z
    21e2:	91 81       	ldd	r25, Z+1	; 0x01
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	f1 f7       	brne	.-4      	; 0x21e4 <LCD_displayCharacter+0x18a>
    21e8:	fe 01       	movw	r30, r28
    21ea:	ff 96       	adiw	r30, 0x3f	; 63
    21ec:	91 83       	std	Z+1, r25	; 0x01
    21ee:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_ms(1);

	/* 3 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	62 e0       	ldi	r22, 0x02	; 2
    21f4:	41 e0       	ldi	r20, 0x01	; 1
    21f6:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	a0 e8       	ldi	r26, 0x80	; 128
    2200:	bf e3       	ldi	r27, 0x3F	; 63
    2202:	8b af       	std	Y+59, r24	; 0x3b
    2204:	9c af       	std	Y+60, r25	; 0x3c
    2206:	ad af       	std	Y+61, r26	; 0x3d
    2208:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220a:	6b ad       	ldd	r22, Y+59	; 0x3b
    220c:	7c ad       	ldd	r23, Y+60	; 0x3c
    220e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2210:	9e ad       	ldd	r25, Y+62	; 0x3e
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	4a ef       	ldi	r20, 0xFA	; 250
    2218:	54 e4       	ldi	r21, 0x44	; 68
    221a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	8f ab       	std	Y+55, r24	; 0x37
    2224:	98 af       	std	Y+56, r25	; 0x38
    2226:	a9 af       	std	Y+57, r26	; 0x39
    2228:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    222a:	6f a9       	ldd	r22, Y+55	; 0x37
    222c:	78 ad       	ldd	r23, Y+56	; 0x38
    222e:	89 ad       	ldd	r24, Y+57	; 0x39
    2230:	9a ad       	ldd	r25, Y+58	; 0x3a
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e8       	ldi	r20, 0x80	; 128
    2238:	5f e3       	ldi	r21, 0x3F	; 63
    223a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    223e:	88 23       	and	r24, r24
    2240:	2c f4       	brge	.+10     	; 0x224c <LCD_displayCharacter+0x1f2>
		__ticks = 1;
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	9e ab       	std	Y+54, r25	; 0x36
    2248:	8d ab       	std	Y+53, r24	; 0x35
    224a:	3f c0       	rjmp	.+126    	; 0x22ca <LCD_displayCharacter+0x270>
	else if (__tmp > 65535)
    224c:	6f a9       	ldd	r22, Y+55	; 0x37
    224e:	78 ad       	ldd	r23, Y+56	; 0x38
    2250:	89 ad       	ldd	r24, Y+57	; 0x39
    2252:	9a ad       	ldd	r25, Y+58	; 0x3a
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	3f ef       	ldi	r19, 0xFF	; 255
    2258:	4f e7       	ldi	r20, 0x7F	; 127
    225a:	57 e4       	ldi	r21, 0x47	; 71
    225c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2260:	18 16       	cp	r1, r24
    2262:	4c f5       	brge	.+82     	; 0x22b6 <LCD_displayCharacter+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2264:	6b ad       	ldd	r22, Y+59	; 0x3b
    2266:	7c ad       	ldd	r23, Y+60	; 0x3c
    2268:	8d ad       	ldd	r24, Y+61	; 0x3d
    226a:	9e ad       	ldd	r25, Y+62	; 0x3e
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e2       	ldi	r20, 0x20	; 32
    2272:	51 e4       	ldi	r21, 0x41	; 65
    2274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	bc 01       	movw	r22, r24
    227e:	cd 01       	movw	r24, r26
    2280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	9e ab       	std	Y+54, r25	; 0x36
    228a:	8d ab       	std	Y+53, r24	; 0x35
    228c:	0f c0       	rjmp	.+30     	; 0x22ac <LCD_displayCharacter+0x252>
    228e:	88 ec       	ldi	r24, 0xC8	; 200
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	9c ab       	std	Y+52, r25	; 0x34
    2294:	8b ab       	std	Y+51, r24	; 0x33
    2296:	8b a9       	ldd	r24, Y+51	; 0x33
    2298:	9c a9       	ldd	r25, Y+52	; 0x34
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	f1 f7       	brne	.-4      	; 0x229a <LCD_displayCharacter+0x240>
    229e:	9c ab       	std	Y+52, r25	; 0x34
    22a0:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a2:	8d a9       	ldd	r24, Y+53	; 0x35
    22a4:	9e a9       	ldd	r25, Y+54	; 0x36
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	9e ab       	std	Y+54, r25	; 0x36
    22aa:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ac:	8d a9       	ldd	r24, Y+53	; 0x35
    22ae:	9e a9       	ldd	r25, Y+54	; 0x36
    22b0:	00 97       	sbiw	r24, 0x00	; 0
    22b2:	69 f7       	brne	.-38     	; 0x228e <LCD_displayCharacter+0x234>
    22b4:	14 c0       	rjmp	.+40     	; 0x22de <LCD_displayCharacter+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b6:	6f a9       	ldd	r22, Y+55	; 0x37
    22b8:	78 ad       	ldd	r23, Y+56	; 0x38
    22ba:	89 ad       	ldd	r24, Y+57	; 0x39
    22bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    22be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	9e ab       	std	Y+54, r25	; 0x36
    22c8:	8d ab       	std	Y+53, r24	; 0x35
    22ca:	8d a9       	ldd	r24, Y+53	; 0x35
    22cc:	9e a9       	ldd	r25, Y+54	; 0x36
    22ce:	9a ab       	std	Y+50, r25	; 0x32
    22d0:	89 ab       	std	Y+49, r24	; 0x31
    22d2:	89 a9       	ldd	r24, Y+49	; 0x31
    22d4:	9a a9       	ldd	r25, Y+50	; 0x32
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	f1 f7       	brne	.-4      	; 0x22d6 <LCD_displayCharacter+0x27c>
    22da:	9a ab       	std	Y+50, r25	; 0x32
    22dc:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(1);

#if(LCD_BIT_MODE == 8)

	/* 5 - send our command */
	GPIO_writePort(LCD_DATA_PORT_ID,data);
    22de:	fe 01       	movw	r30, r28
    22e0:	e3 5b       	subi	r30, 0xB3	; 179
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	60 81       	ld	r22, Z
    22e8:	0e 94 66 08 	call	0x10cc	; 0x10cc <GPIO_writePort>
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	a0 e8       	ldi	r26, 0x80	; 128
    22f2:	bf e3       	ldi	r27, 0x3F	; 63
    22f4:	8d a7       	std	Y+45, r24	; 0x2d
    22f6:	9e a7       	std	Y+46, r25	; 0x2e
    22f8:	af a7       	std	Y+47, r26	; 0x2f
    22fa:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22fc:	6d a5       	ldd	r22, Y+45	; 0x2d
    22fe:	7e a5       	ldd	r23, Y+46	; 0x2e
    2300:	8f a5       	ldd	r24, Y+47	; 0x2f
    2302:	98 a9       	ldd	r25, Y+48	; 0x30
    2304:	2b ea       	ldi	r18, 0xAB	; 171
    2306:	3a ea       	ldi	r19, 0xAA	; 170
    2308:	4a e2       	ldi	r20, 0x2A	; 42
    230a:	50 e4       	ldi	r21, 0x40	; 64
    230c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	89 a7       	std	Y+41, r24	; 0x29
    2316:	9a a7       	std	Y+42, r25	; 0x2a
    2318:	ab a7       	std	Y+43, r26	; 0x2b
    231a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    231c:	69 a5       	ldd	r22, Y+41	; 0x29
    231e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2320:	8b a5       	ldd	r24, Y+43	; 0x2b
    2322:	9c a5       	ldd	r25, Y+44	; 0x2c
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e8       	ldi	r20, 0x80	; 128
    232a:	5f e3       	ldi	r21, 0x3F	; 63
    232c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2330:	88 23       	and	r24, r24
    2332:	1c f4       	brge	.+6      	; 0x233a <LCD_displayCharacter+0x2e0>
		__ticks = 1;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	88 a7       	std	Y+40, r24	; 0x28
    2338:	91 c0       	rjmp	.+290    	; 0x245c <LCD_displayCharacter+0x402>
	else if (__tmp > 255)
    233a:	69 a5       	ldd	r22, Y+41	; 0x29
    233c:	7a a5       	ldd	r23, Y+42	; 0x2a
    233e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2340:	9c a5       	ldd	r25, Y+44	; 0x2c
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	4f e7       	ldi	r20, 0x7F	; 127
    2348:	53 e4       	ldi	r21, 0x43	; 67
    234a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    234e:	18 16       	cp	r1, r24
    2350:	0c f0       	brlt	.+2      	; 0x2354 <LCD_displayCharacter+0x2fa>
    2352:	7b c0       	rjmp	.+246    	; 0x244a <LCD_displayCharacter+0x3f0>
	{
		_delay_ms(__us / 1000.0);
    2354:	6d a5       	ldd	r22, Y+45	; 0x2d
    2356:	7e a5       	ldd	r23, Y+46	; 0x2e
    2358:	8f a5       	ldd	r24, Y+47	; 0x2f
    235a:	98 a9       	ldd	r25, Y+48	; 0x30
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	4a e7       	ldi	r20, 0x7A	; 122
    2362:	54 e4       	ldi	r21, 0x44	; 68
    2364:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	8c a3       	std	Y+36, r24	; 0x24
    236e:	9d a3       	std	Y+37, r25	; 0x25
    2370:	ae a3       	std	Y+38, r26	; 0x26
    2372:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2374:	6c a1       	ldd	r22, Y+36	; 0x24
    2376:	7d a1       	ldd	r23, Y+37	; 0x25
    2378:	8e a1       	ldd	r24, Y+38	; 0x26
    237a:	9f a1       	ldd	r25, Y+39	; 0x27
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	4a ef       	ldi	r20, 0xFA	; 250
    2382:	54 e4       	ldi	r21, 0x44	; 68
    2384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	88 a3       	std	Y+32, r24	; 0x20
    238e:	99 a3       	std	Y+33, r25	; 0x21
    2390:	aa a3       	std	Y+34, r26	; 0x22
    2392:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2394:	68 a1       	ldd	r22, Y+32	; 0x20
    2396:	79 a1       	ldd	r23, Y+33	; 0x21
    2398:	8a a1       	ldd	r24, Y+34	; 0x22
    239a:	9b a1       	ldd	r25, Y+35	; 0x23
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e8       	ldi	r20, 0x80	; 128
    23a2:	5f e3       	ldi	r21, 0x3F	; 63
    23a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23a8:	88 23       	and	r24, r24
    23aa:	2c f4       	brge	.+10     	; 0x23b6 <LCD_displayCharacter+0x35c>
		__ticks = 1;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	9f 8f       	std	Y+31, r25	; 0x1f
    23b2:	8e 8f       	std	Y+30, r24	; 0x1e
    23b4:	3f c0       	rjmp	.+126    	; 0x2434 <LCD_displayCharacter+0x3da>
	else if (__tmp > 65535)
    23b6:	68 a1       	ldd	r22, Y+32	; 0x20
    23b8:	79 a1       	ldd	r23, Y+33	; 0x21
    23ba:	8a a1       	ldd	r24, Y+34	; 0x22
    23bc:	9b a1       	ldd	r25, Y+35	; 0x23
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	3f ef       	ldi	r19, 0xFF	; 255
    23c2:	4f e7       	ldi	r20, 0x7F	; 127
    23c4:	57 e4       	ldi	r21, 0x47	; 71
    23c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ca:	18 16       	cp	r1, r24
    23cc:	4c f5       	brge	.+82     	; 0x2420 <LCD_displayCharacter+0x3c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ce:	6c a1       	ldd	r22, Y+36	; 0x24
    23d0:	7d a1       	ldd	r23, Y+37	; 0x25
    23d2:	8e a1       	ldd	r24, Y+38	; 0x26
    23d4:	9f a1       	ldd	r25, Y+39	; 0x27
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	40 e2       	ldi	r20, 0x20	; 32
    23dc:	51 e4       	ldi	r21, 0x41	; 65
    23de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	bc 01       	movw	r22, r24
    23e8:	cd 01       	movw	r24, r26
    23ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	9f 8f       	std	Y+31, r25	; 0x1f
    23f4:	8e 8f       	std	Y+30, r24	; 0x1e
    23f6:	0f c0       	rjmp	.+30     	; 0x2416 <LCD_displayCharacter+0x3bc>
    23f8:	88 ec       	ldi	r24, 0xC8	; 200
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	9d 8f       	std	Y+29, r25	; 0x1d
    23fe:	8c 8f       	std	Y+28, r24	; 0x1c
    2400:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2402:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <LCD_displayCharacter+0x3aa>
    2408:	9d 8f       	std	Y+29, r25	; 0x1d
    240a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    240e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	9f 8f       	std	Y+31, r25	; 0x1f
    2414:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2416:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2418:	9f 8d       	ldd	r25, Y+31	; 0x1f
    241a:	00 97       	sbiw	r24, 0x00	; 0
    241c:	69 f7       	brne	.-38     	; 0x23f8 <LCD_displayCharacter+0x39e>
    241e:	24 c0       	rjmp	.+72     	; 0x2468 <LCD_displayCharacter+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2420:	68 a1       	ldd	r22, Y+32	; 0x20
    2422:	79 a1       	ldd	r23, Y+33	; 0x21
    2424:	8a a1       	ldd	r24, Y+34	; 0x22
    2426:	9b a1       	ldd	r25, Y+35	; 0x23
    2428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	9f 8f       	std	Y+31, r25	; 0x1f
    2432:	8e 8f       	std	Y+30, r24	; 0x1e
    2434:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2436:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2438:	9b 8f       	std	Y+27, r25	; 0x1b
    243a:	8a 8f       	std	Y+26, r24	; 0x1a
    243c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    243e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <LCD_displayCharacter+0x3e6>
    2444:	9b 8f       	std	Y+27, r25	; 0x1b
    2446:	8a 8f       	std	Y+26, r24	; 0x1a
    2448:	0f c0       	rjmp	.+30     	; 0x2468 <LCD_displayCharacter+0x40e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    244a:	69 a5       	ldd	r22, Y+41	; 0x29
    244c:	7a a5       	ldd	r23, Y+42	; 0x2a
    244e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2450:	9c a5       	ldd	r25, Y+44	; 0x2c
    2452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	88 a7       	std	Y+40, r24	; 0x28
    245c:	88 a5       	ldd	r24, Y+40	; 0x28
    245e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2460:	89 8d       	ldd	r24, Y+25	; 0x19
    2462:	8a 95       	dec	r24
    2464:	f1 f7       	brne	.-4      	; 0x2462 <LCD_displayCharacter+0x408>
    2466:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

#endif

	/* 7 - clear enable*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	62 e0       	ldi	r22, 0x02	; 2
    246c:	40 e0       	ldi	r20, 0x00	; 0
    246e:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	a0 e8       	ldi	r26, 0x80	; 128
    2478:	bf e3       	ldi	r27, 0x3F	; 63
    247a:	8d 8b       	std	Y+21, r24	; 0x15
    247c:	9e 8b       	std	Y+22, r25	; 0x16
    247e:	af 8b       	std	Y+23, r26	; 0x17
    2480:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2482:	6d 89       	ldd	r22, Y+21	; 0x15
    2484:	7e 89       	ldd	r23, Y+22	; 0x16
    2486:	8f 89       	ldd	r24, Y+23	; 0x17
    2488:	98 8d       	ldd	r25, Y+24	; 0x18
    248a:	2b ea       	ldi	r18, 0xAB	; 171
    248c:	3a ea       	ldi	r19, 0xAA	; 170
    248e:	4a e2       	ldi	r20, 0x2A	; 42
    2490:	50 e4       	ldi	r21, 0x40	; 64
    2492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	89 8b       	std	Y+17, r24	; 0x11
    249c:	9a 8b       	std	Y+18, r25	; 0x12
    249e:	ab 8b       	std	Y+19, r26	; 0x13
    24a0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    24a2:	69 89       	ldd	r22, Y+17	; 0x11
    24a4:	7a 89       	ldd	r23, Y+18	; 0x12
    24a6:	8b 89       	ldd	r24, Y+19	; 0x13
    24a8:	9c 89       	ldd	r25, Y+20	; 0x14
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	40 e8       	ldi	r20, 0x80	; 128
    24b0:	5f e3       	ldi	r21, 0x3F	; 63
    24b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24b6:	88 23       	and	r24, r24
    24b8:	1c f4       	brge	.+6      	; 0x24c0 <LCD_displayCharacter+0x466>
		__ticks = 1;
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	88 8b       	std	Y+16, r24	; 0x10
    24be:	91 c0       	rjmp	.+290    	; 0x25e2 <LCD_displayCharacter+0x588>
	else if (__tmp > 255)
    24c0:	69 89       	ldd	r22, Y+17	; 0x11
    24c2:	7a 89       	ldd	r23, Y+18	; 0x12
    24c4:	8b 89       	ldd	r24, Y+19	; 0x13
    24c6:	9c 89       	ldd	r25, Y+20	; 0x14
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	4f e7       	ldi	r20, 0x7F	; 127
    24ce:	53 e4       	ldi	r21, 0x43	; 67
    24d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24d4:	18 16       	cp	r1, r24
    24d6:	0c f0       	brlt	.+2      	; 0x24da <LCD_displayCharacter+0x480>
    24d8:	7b c0       	rjmp	.+246    	; 0x25d0 <LCD_displayCharacter+0x576>
	{
		_delay_ms(__us / 1000.0);
    24da:	6d 89       	ldd	r22, Y+21	; 0x15
    24dc:	7e 89       	ldd	r23, Y+22	; 0x16
    24de:	8f 89       	ldd	r24, Y+23	; 0x17
    24e0:	98 8d       	ldd	r25, Y+24	; 0x18
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	4a e7       	ldi	r20, 0x7A	; 122
    24e8:	54 e4       	ldi	r21, 0x44	; 68
    24ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	8c 87       	std	Y+12, r24	; 0x0c
    24f4:	9d 87       	std	Y+13, r25	; 0x0d
    24f6:	ae 87       	std	Y+14, r26	; 0x0e
    24f8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    24fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    24fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2500:	9f 85       	ldd	r25, Y+15	; 0x0f
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	4a ef       	ldi	r20, 0xFA	; 250
    2508:	54 e4       	ldi	r21, 0x44	; 68
    250a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	88 87       	std	Y+8, r24	; 0x08
    2514:	99 87       	std	Y+9, r25	; 0x09
    2516:	aa 87       	std	Y+10, r26	; 0x0a
    2518:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    251a:	68 85       	ldd	r22, Y+8	; 0x08
    251c:	79 85       	ldd	r23, Y+9	; 0x09
    251e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2520:	9b 85       	ldd	r25, Y+11	; 0x0b
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e8       	ldi	r20, 0x80	; 128
    2528:	5f e3       	ldi	r21, 0x3F	; 63
    252a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    252e:	88 23       	and	r24, r24
    2530:	2c f4       	brge	.+10     	; 0x253c <LCD_displayCharacter+0x4e2>
		__ticks = 1;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9f 83       	std	Y+7, r25	; 0x07
    2538:	8e 83       	std	Y+6, r24	; 0x06
    253a:	3f c0       	rjmp	.+126    	; 0x25ba <LCD_displayCharacter+0x560>
	else if (__tmp > 65535)
    253c:	68 85       	ldd	r22, Y+8	; 0x08
    253e:	79 85       	ldd	r23, Y+9	; 0x09
    2540:	8a 85       	ldd	r24, Y+10	; 0x0a
    2542:	9b 85       	ldd	r25, Y+11	; 0x0b
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	3f ef       	ldi	r19, 0xFF	; 255
    2548:	4f e7       	ldi	r20, 0x7F	; 127
    254a:	57 e4       	ldi	r21, 0x47	; 71
    254c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2550:	18 16       	cp	r1, r24
    2552:	4c f5       	brge	.+82     	; 0x25a6 <LCD_displayCharacter+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2554:	6c 85       	ldd	r22, Y+12	; 0x0c
    2556:	7d 85       	ldd	r23, Y+13	; 0x0d
    2558:	8e 85       	ldd	r24, Y+14	; 0x0e
    255a:	9f 85       	ldd	r25, Y+15	; 0x0f
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e2       	ldi	r20, 0x20	; 32
    2562:	51 e4       	ldi	r21, 0x41	; 65
    2564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	bc 01       	movw	r22, r24
    256e:	cd 01       	movw	r24, r26
    2570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	9f 83       	std	Y+7, r25	; 0x07
    257a:	8e 83       	std	Y+6, r24	; 0x06
    257c:	0f c0       	rjmp	.+30     	; 0x259c <LCD_displayCharacter+0x542>
    257e:	88 ec       	ldi	r24, 0xC8	; 200
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	9d 83       	std	Y+5, r25	; 0x05
    2584:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2586:	8c 81       	ldd	r24, Y+4	; 0x04
    2588:	9d 81       	ldd	r25, Y+5	; 0x05
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	f1 f7       	brne	.-4      	; 0x258a <LCD_displayCharacter+0x530>
    258e:	9d 83       	std	Y+5, r25	; 0x05
    2590:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2592:	8e 81       	ldd	r24, Y+6	; 0x06
    2594:	9f 81       	ldd	r25, Y+7	; 0x07
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	9f 83       	std	Y+7, r25	; 0x07
    259a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259c:	8e 81       	ldd	r24, Y+6	; 0x06
    259e:	9f 81       	ldd	r25, Y+7	; 0x07
    25a0:	00 97       	sbiw	r24, 0x00	; 0
    25a2:	69 f7       	brne	.-38     	; 0x257e <LCD_displayCharacter+0x524>
    25a4:	24 c0       	rjmp	.+72     	; 0x25ee <LCD_displayCharacter+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a6:	68 85       	ldd	r22, Y+8	; 0x08
    25a8:	79 85       	ldd	r23, Y+9	; 0x09
    25aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    25ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	9f 83       	std	Y+7, r25	; 0x07
    25b8:	8e 83       	std	Y+6, r24	; 0x06
    25ba:	8e 81       	ldd	r24, Y+6	; 0x06
    25bc:	9f 81       	ldd	r25, Y+7	; 0x07
    25be:	9b 83       	std	Y+3, r25	; 0x03
    25c0:	8a 83       	std	Y+2, r24	; 0x02
    25c2:	8a 81       	ldd	r24, Y+2	; 0x02
    25c4:	9b 81       	ldd	r25, Y+3	; 0x03
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	f1 f7       	brne	.-4      	; 0x25c6 <LCD_displayCharacter+0x56c>
    25ca:	9b 83       	std	Y+3, r25	; 0x03
    25cc:	8a 83       	std	Y+2, r24	; 0x02
    25ce:	0f c0       	rjmp	.+30     	; 0x25ee <LCD_displayCharacter+0x594>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25d0:	69 89       	ldd	r22, Y+17	; 0x11
    25d2:	7a 89       	ldd	r23, Y+18	; 0x12
    25d4:	8b 89       	ldd	r24, Y+19	; 0x13
    25d6:	9c 89       	ldd	r25, Y+20	; 0x14
    25d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	88 8b       	std	Y+16, r24	; 0x10
    25e2:	88 89       	ldd	r24, Y+16	; 0x10
    25e4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	8a 95       	dec	r24
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <LCD_displayCharacter+0x58e>
    25ec:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    25ee:	c3 5b       	subi	r28, 0xB3	; 179
    25f0:	df 4f       	sbci	r29, 0xFF	; 255
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	de bf       	out	0x3e, r29	; 62
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	cd bf       	out	0x3d, r28	; 61
    25fc:	cf 91       	pop	r28
    25fe:	df 91       	pop	r29
    2600:	1f 91       	pop	r17
    2602:	0f 91       	pop	r16
    2604:	08 95       	ret

00002606 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	00 d0       	rcall	.+0      	; 0x260c <LCD_displayString+0x6>
    260c:	0f 92       	push	r0
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	9b 83       	std	Y+3, r25	; 0x03
    2614:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i=0;str[i]!='\0';i++)
    2616:	19 82       	std	Y+1, r1	; 0x01
    2618:	0e c0       	rjmp	.+28     	; 0x2636 <LCD_displayString+0x30>
		LCD_displayCharacter(str[i]);
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	28 2f       	mov	r18, r24
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	8a 81       	ldd	r24, Y+2	; 0x02
    2622:	9b 81       	ldd	r25, Y+3	; 0x03
    2624:	fc 01       	movw	r30, r24
    2626:	e2 0f       	add	r30, r18
    2628:	f3 1f       	adc	r31, r19
    262a:	80 81       	ld	r24, Z
    262c:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_displayCharacter>
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
	uint8 i;
	for(i=0;str[i]!='\0';i++)
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	8f 5f       	subi	r24, 0xFF	; 255
    2634:	89 83       	std	Y+1, r24	; 0x01
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	28 2f       	mov	r18, r24
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	8a 81       	ldd	r24, Y+2	; 0x02
    263e:	9b 81       	ldd	r25, Y+3	; 0x03
    2640:	fc 01       	movw	r30, r24
    2642:	e2 0f       	add	r30, r18
    2644:	f3 1f       	adc	r31, r19
    2646:	80 81       	ld	r24, Z
    2648:	88 23       	and	r24, r24
    264a:	39 f7       	brne	.-50     	; 0x261a <LCD_displayString+0x14>
		LCD_displayCharacter(str[i]);
}
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	62 97       	sbiw	r28, 0x12	; 18
    2662:	0f b6       	in	r0, 0x3f	; 63
    2664:	f8 94       	cli
    2666:	de bf       	out	0x3e, r29	; 62
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	cd bf       	out	0x3d, r28	; 61
    266c:	9a 8b       	std	Y+18, r25	; 0x12
    266e:	89 8b       	std	Y+17, r24	; 0x11
   char arr[16];

   /* store the integer number to arr & 10 is for decimal numbering system*/
   itoa(data,arr,10);
    2670:	89 89       	ldd	r24, Y+17	; 0x11
    2672:	9a 89       	ldd	r25, Y+18	; 0x12
    2674:	9e 01       	movw	r18, r28
    2676:	2f 5f       	subi	r18, 0xFF	; 255
    2678:	3f 4f       	sbci	r19, 0xFF	; 255
    267a:	b9 01       	movw	r22, r18
    267c:	4a e0       	ldi	r20, 0x0A	; 10
    267e:	50 e0       	ldi	r21, 0x00	; 0
    2680:	0e 94 b7 14 	call	0x296e	; 0x296e <itoa>

   LCD_displayString(arr);
    2684:	ce 01       	movw	r24, r28
    2686:	01 96       	adiw	r24, 0x01	; 1
    2688:	0e 94 03 13 	call	0x2606	; 0x2606 <LCD_displayString>
}
    268c:	62 96       	adiw	r28, 0x12	; 18
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	f8 94       	cli
    2692:	de bf       	out	0x3e, r29	; 62
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	cd bf       	out	0x3d, r28	; 61
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	08 95       	ret

0000269e <LCD_moveCursor>:
/*
 * Description :
 * A function which change the cursor position according to given row and column
 */
void LCD_moveCursor(uint8 row, uint8 column)
{
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	00 d0       	rcall	.+0      	; 0x26a4 <LCD_moveCursor+0x6>
    26a4:	00 d0       	rcall	.+0      	; 0x26a6 <LCD_moveCursor+0x8>
    26a6:	0f 92       	push	r0
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
    26ac:	8a 83       	std	Y+2, r24	; 0x02
    26ae:	6b 83       	std	Y+3, r22	; 0x03
	 * fourth row position is 0x50 + column
	 * and then we should set the MSB of position by
	 * or it with 0b10000000 which is 0x80
	 */
	uint8 position;
	switch(row)
    26b0:	8a 81       	ldd	r24, Y+2	; 0x02
    26b2:	28 2f       	mov	r18, r24
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	3d 83       	std	Y+5, r19	; 0x05
    26b8:	2c 83       	std	Y+4, r18	; 0x04
    26ba:	8c 81       	ldd	r24, Y+4	; 0x04
    26bc:	9d 81       	ldd	r25, Y+5	; 0x05
    26be:	81 30       	cpi	r24, 0x01	; 1
    26c0:	91 05       	cpc	r25, r1
    26c2:	c1 f0       	breq	.+48     	; 0x26f4 <LCD_moveCursor+0x56>
    26c4:	2c 81       	ldd	r18, Y+4	; 0x04
    26c6:	3d 81       	ldd	r19, Y+5	; 0x05
    26c8:	22 30       	cpi	r18, 0x02	; 2
    26ca:	31 05       	cpc	r19, r1
    26cc:	2c f4       	brge	.+10     	; 0x26d8 <LCD_moveCursor+0x3a>
    26ce:	8c 81       	ldd	r24, Y+4	; 0x04
    26d0:	9d 81       	ldd	r25, Y+5	; 0x05
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	61 f0       	breq	.+24     	; 0x26ee <LCD_moveCursor+0x50>
    26d6:	19 c0       	rjmp	.+50     	; 0x270a <LCD_moveCursor+0x6c>
    26d8:	2c 81       	ldd	r18, Y+4	; 0x04
    26da:	3d 81       	ldd	r19, Y+5	; 0x05
    26dc:	22 30       	cpi	r18, 0x02	; 2
    26de:	31 05       	cpc	r19, r1
    26e0:	69 f0       	breq	.+26     	; 0x26fc <LCD_moveCursor+0x5e>
    26e2:	8c 81       	ldd	r24, Y+4	; 0x04
    26e4:	9d 81       	ldd	r25, Y+5	; 0x05
    26e6:	83 30       	cpi	r24, 0x03	; 3
    26e8:	91 05       	cpc	r25, r1
    26ea:	61 f0       	breq	.+24     	; 0x2704 <LCD_moveCursor+0x66>
    26ec:	0e c0       	rjmp	.+28     	; 0x270a <LCD_moveCursor+0x6c>
	{
	case 0 :
		position=0x00+column;
    26ee:	8b 81       	ldd	r24, Y+3	; 0x03
    26f0:	89 83       	std	Y+1, r24	; 0x01
    26f2:	0b c0       	rjmp	.+22     	; 0x270a <LCD_moveCursor+0x6c>
		break;
	case 1 :
		position=0x40+column;
    26f4:	8b 81       	ldd	r24, Y+3	; 0x03
    26f6:	80 5c       	subi	r24, 0xC0	; 192
    26f8:	89 83       	std	Y+1, r24	; 0x01
    26fa:	07 c0       	rjmp	.+14     	; 0x270a <LCD_moveCursor+0x6c>
		break;
	case 2 :
		position=0x10+column;
    26fc:	8b 81       	ldd	r24, Y+3	; 0x03
    26fe:	80 5f       	subi	r24, 0xF0	; 240
    2700:	89 83       	std	Y+1, r24	; 0x01
    2702:	03 c0       	rjmp	.+6      	; 0x270a <LCD_moveCursor+0x6c>
		break;
	case 3 :
		position=0x40+column;
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
    2706:	80 5c       	subi	r24, 0xC0	; 192
    2708:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(position|LCD_SET_CURSOR_LOCATION);
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	80 68       	ori	r24, 0x80	; 128
    270e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_sendCommand>
}
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	0f 90       	pop	r0
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	cf 91       	pop	r28
    271e:	df 91       	pop	r29
    2720:	08 95       	ret

00002722 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2722:	df 93       	push	r29
    2724:	cf 93       	push	r28
    2726:	00 d0       	rcall	.+0      	; 0x2728 <LCD_displayStringRowColumn+0x6>
    2728:	00 d0       	rcall	.+0      	; 0x272a <LCD_displayStringRowColumn+0x8>
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	89 83       	std	Y+1, r24	; 0x01
    2730:	6a 83       	std	Y+2, r22	; 0x02
    2732:	5c 83       	std	Y+4, r21	; 0x04
    2734:	4b 83       	std	Y+3, r20	; 0x03
	/*Move cursor to that position*/
	LCD_moveCursor(row,col);
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	6a 81       	ldd	r22, Y+2	; 0x02
    273a:	0e 94 4f 13 	call	0x269e	; 0x269e <LCD_moveCursor>

	/* Display the string*/
	LCD_displayString(Str);
    273e:	8b 81       	ldd	r24, Y+3	; 0x03
    2740:	9c 81       	ldd	r25, Y+4	; 0x04
    2742:	0e 94 03 13 	call	0x2606	; 0x2606 <LCD_displayString>
}
    2746:	0f 90       	pop	r0
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	cf 91       	pop	r28
    2750:	df 91       	pop	r29
    2752:	08 95       	ret

00002754 <LCD_clearScreen>:
/*
 * Description :
 * remove the text displayed on the screen
 */
void LCD_clearScreen()
{
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_sendCommand>
}
    2762:	cf 91       	pop	r28
    2764:	df 91       	pop	r29
    2766:	08 95       	ret

00002768 <main>:
#include"hcsr04.h"
#include"lcd.h"
#include<avr/io.h>
#include<util/delay.h>
int main()
{
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	62 97       	sbiw	r28, 0x12	; 18
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
	uint16 new_distance = 0,old_distance=0;
    277c:	1a 8a       	std	Y+18, r1	; 0x12
    277e:	19 8a       	std	Y+17, r1	; 0x11
    2780:	18 8a       	std	Y+16, r1	; 0x10
    2782:	1f 86       	std	Y+15, r1	; 0x0f

	/* Enable I-Bit to enable the interrupts */
	SREG |= (1<<7);
    2784:	af e5       	ldi	r26, 0x5F	; 95
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	ef e5       	ldi	r30, 0x5F	; 95
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	80 68       	ori	r24, 0x80	; 128
    2790:	8c 93       	st	X, r24

	/* Initialize the LCD driver */
	LCD_init();
    2792:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <LCD_init>

	/* Initialize the ultrasonic driver */
	ultrasonic_init();
    2796:	0e 94 4e 09 	call	0x129c	; 0x129c <ultrasonic_init>

	/* the first displayed item on screen */
	LCD_displayString("Distance = ");
    279a:	80 e6       	ldi	r24, 0x60	; 96
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	0e 94 03 13 	call	0x2606	; 0x2606 <LCD_displayString>
	new_distance = ultrasonic_readDistance();
    27a2:	0e 94 44 0a 	call	0x1488	; 0x1488 <ultrasonic_readDistance>
    27a6:	9a 8b       	std	Y+18, r25	; 0x12
    27a8:	89 8b       	std	Y+17, r24	; 0x11
	LCD_integerToString(999);
    27aa:	87 ee       	ldi	r24, 0xE7	; 231
    27ac:	93 e0       	ldi	r25, 0x03	; 3
    27ae:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_integerToString>
	LCD_displayString("cm");
    27b2:	8c e6       	ldi	r24, 0x6C	; 108
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	0e 94 03 13 	call	0x2606	; 0x2606 <LCD_displayString>
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	a6 e9       	ldi	r26, 0x96	; 150
    27c0:	b3 e4       	ldi	r27, 0x43	; 67
    27c2:	8b 87       	std	Y+11, r24	; 0x0b
    27c4:	9c 87       	std	Y+12, r25	; 0x0c
    27c6:	ad 87       	std	Y+13, r26	; 0x0d
    27c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    27cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	4a ef       	ldi	r20, 0xFA	; 250
    27d8:	54 e4       	ldi	r21, 0x44	; 68
    27da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	8f 83       	std	Y+7, r24	; 0x07
    27e4:	98 87       	std	Y+8, r25	; 0x08
    27e6:	a9 87       	std	Y+9, r26	; 0x09
    27e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ea:	6f 81       	ldd	r22, Y+7	; 0x07
    27ec:	78 85       	ldd	r23, Y+8	; 0x08
    27ee:	89 85       	ldd	r24, Y+9	; 0x09
    27f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	40 e8       	ldi	r20, 0x80	; 128
    27f8:	5f e3       	ldi	r21, 0x3F	; 63
    27fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27fe:	88 23       	and	r24, r24
    2800:	2c f4       	brge	.+10     	; 0x280c <main+0xa4>
		__ticks = 1;
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	9e 83       	std	Y+6, r25	; 0x06
    2808:	8d 83       	std	Y+5, r24	; 0x05
    280a:	3f c0       	rjmp	.+126    	; 0x288a <main+0x122>
	else if (__tmp > 65535)
    280c:	6f 81       	ldd	r22, Y+7	; 0x07
    280e:	78 85       	ldd	r23, Y+8	; 0x08
    2810:	89 85       	ldd	r24, Y+9	; 0x09
    2812:	9a 85       	ldd	r25, Y+10	; 0x0a
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	3f ef       	ldi	r19, 0xFF	; 255
    2818:	4f e7       	ldi	r20, 0x7F	; 127
    281a:	57 e4       	ldi	r21, 0x47	; 71
    281c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2820:	18 16       	cp	r1, r24
    2822:	4c f5       	brge	.+82     	; 0x2876 <main+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2824:	6b 85       	ldd	r22, Y+11	; 0x0b
    2826:	7c 85       	ldd	r23, Y+12	; 0x0c
    2828:	8d 85       	ldd	r24, Y+13	; 0x0d
    282a:	9e 85       	ldd	r25, Y+14	; 0x0e
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	40 e2       	ldi	r20, 0x20	; 32
    2832:	51 e4       	ldi	r21, 0x41	; 65
    2834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	bc 01       	movw	r22, r24
    283e:	cd 01       	movw	r24, r26
    2840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	9e 83       	std	Y+6, r25	; 0x06
    284a:	8d 83       	std	Y+5, r24	; 0x05
    284c:	0f c0       	rjmp	.+30     	; 0x286c <main+0x104>
    284e:	88 ec       	ldi	r24, 0xC8	; 200
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	9c 83       	std	Y+4, r25	; 0x04
    2854:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2856:	8b 81       	ldd	r24, Y+3	; 0x03
    2858:	9c 81       	ldd	r25, Y+4	; 0x04
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	f1 f7       	brne	.-4      	; 0x285a <main+0xf2>
    285e:	9c 83       	std	Y+4, r25	; 0x04
    2860:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2862:	8d 81       	ldd	r24, Y+5	; 0x05
    2864:	9e 81       	ldd	r25, Y+6	; 0x06
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	9e 83       	std	Y+6, r25	; 0x06
    286a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286c:	8d 81       	ldd	r24, Y+5	; 0x05
    286e:	9e 81       	ldd	r25, Y+6	; 0x06
    2870:	00 97       	sbiw	r24, 0x00	; 0
    2872:	69 f7       	brne	.-38     	; 0x284e <main+0xe6>
    2874:	14 c0       	rjmp	.+40     	; 0x289e <main+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2876:	6f 81       	ldd	r22, Y+7	; 0x07
    2878:	78 85       	ldd	r23, Y+8	; 0x08
    287a:	89 85       	ldd	r24, Y+9	; 0x09
    287c:	9a 85       	ldd	r25, Y+10	; 0x0a
    287e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	9e 83       	std	Y+6, r25	; 0x06
    2888:	8d 83       	std	Y+5, r24	; 0x05
    288a:	8d 81       	ldd	r24, Y+5	; 0x05
    288c:	9e 81       	ldd	r25, Y+6	; 0x06
    288e:	9a 83       	std	Y+2, r25	; 0x02
    2890:	89 83       	std	Y+1, r24	; 0x01
    2892:	89 81       	ldd	r24, Y+1	; 0x01
    2894:	9a 81       	ldd	r25, Y+2	; 0x02
    2896:	01 97       	sbiw	r24, 0x01	; 1
    2898:	f1 f7       	brne	.-4      	; 0x2896 <main+0x12e>
    289a:	9a 83       	std	Y+2, r25	; 0x02
    289c:	89 83       	std	Y+1, r24	; 0x01
	{
		/*The big delay is to keep up the slow reading*/
		_delay_ms(300);

		/* get the distance read by the ultrasonic sensor */
		new_distance = ultrasonic_readDistance();
    289e:	0e 94 44 0a 	call	0x1488	; 0x1488 <ultrasonic_readDistance>
    28a2:	9a 8b       	std	Y+18, r25	; 0x12
    28a4:	89 8b       	std	Y+17, r24	; 0x11

		if(new_distance!=old_distance)
    28a6:	29 89       	ldd	r18, Y+17	; 0x11
    28a8:	3a 89       	ldd	r19, Y+18	; 0x12
    28aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ac:	98 89       	ldd	r25, Y+16	; 0x10
    28ae:	28 17       	cp	r18, r24
    28b0:	39 07       	cpc	r19, r25
    28b2:	09 f4       	brne	.+2      	; 0x28b6 <main+0x14e>
    28b4:	82 cf       	rjmp	.-252    	; 0x27ba <main+0x52>
		{
			/*display the new reading*/
			LCD_moveCursor(0,10);
    28b6:	80 e0       	ldi	r24, 0x00	; 0
    28b8:	6a e0       	ldi	r22, 0x0A	; 10
    28ba:	0e 94 4f 13 	call	0x269e	; 0x269e <LCD_moveCursor>
			LCD_integerToString(new_distance);
    28be:	89 89       	ldd	r24, Y+17	; 0x11
    28c0:	9a 89       	ldd	r25, Y+18	; 0x12
    28c2:	0e 94 2c 13 	call	0x2658	; 0x2658 <LCD_integerToString>
			LCD_displayString("cm  ");
    28c6:	8f e6       	ldi	r24, 0x6F	; 111
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	0e 94 03 13 	call	0x2606	; 0x2606 <LCD_displayString>

			/*the new reading became old*/
			old_distance=new_distance;
    28ce:	89 89       	ldd	r24, Y+17	; 0x11
    28d0:	9a 89       	ldd	r25, Y+18	; 0x12
    28d2:	98 8b       	std	Y+16, r25	; 0x10
    28d4:	8f 87       	std	Y+15, r24	; 0x0f
    28d6:	71 cf       	rjmp	.-286    	; 0x27ba <main+0x52>

000028d8 <__udivmodhi4>:
    28d8:	aa 1b       	sub	r26, r26
    28da:	bb 1b       	sub	r27, r27
    28dc:	51 e1       	ldi	r21, 0x11	; 17
    28de:	07 c0       	rjmp	.+14     	; 0x28ee <__udivmodhi4_ep>

000028e0 <__udivmodhi4_loop>:
    28e0:	aa 1f       	adc	r26, r26
    28e2:	bb 1f       	adc	r27, r27
    28e4:	a6 17       	cp	r26, r22
    28e6:	b7 07       	cpc	r27, r23
    28e8:	10 f0       	brcs	.+4      	; 0x28ee <__udivmodhi4_ep>
    28ea:	a6 1b       	sub	r26, r22
    28ec:	b7 0b       	sbc	r27, r23

000028ee <__udivmodhi4_ep>:
    28ee:	88 1f       	adc	r24, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	5a 95       	dec	r21
    28f4:	a9 f7       	brne	.-22     	; 0x28e0 <__udivmodhi4_loop>
    28f6:	80 95       	com	r24
    28f8:	90 95       	com	r25
    28fa:	bc 01       	movw	r22, r24
    28fc:	cd 01       	movw	r24, r26
    28fe:	08 95       	ret

00002900 <__prologue_saves__>:
    2900:	2f 92       	push	r2
    2902:	3f 92       	push	r3
    2904:	4f 92       	push	r4
    2906:	5f 92       	push	r5
    2908:	6f 92       	push	r6
    290a:	7f 92       	push	r7
    290c:	8f 92       	push	r8
    290e:	9f 92       	push	r9
    2910:	af 92       	push	r10
    2912:	bf 92       	push	r11
    2914:	cf 92       	push	r12
    2916:	df 92       	push	r13
    2918:	ef 92       	push	r14
    291a:	ff 92       	push	r15
    291c:	0f 93       	push	r16
    291e:	1f 93       	push	r17
    2920:	cf 93       	push	r28
    2922:	df 93       	push	r29
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    2928:	ca 1b       	sub	r28, r26
    292a:	db 0b       	sbc	r29, r27
    292c:	0f b6       	in	r0, 0x3f	; 63
    292e:	f8 94       	cli
    2930:	de bf       	out	0x3e, r29	; 62
    2932:	0f be       	out	0x3f, r0	; 63
    2934:	cd bf       	out	0x3d, r28	; 61
    2936:	09 94       	ijmp

00002938 <__epilogue_restores__>:
    2938:	2a 88       	ldd	r2, Y+18	; 0x12
    293a:	39 88       	ldd	r3, Y+17	; 0x11
    293c:	48 88       	ldd	r4, Y+16	; 0x10
    293e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2940:	6e 84       	ldd	r6, Y+14	; 0x0e
    2942:	7d 84       	ldd	r7, Y+13	; 0x0d
    2944:	8c 84       	ldd	r8, Y+12	; 0x0c
    2946:	9b 84       	ldd	r9, Y+11	; 0x0b
    2948:	aa 84       	ldd	r10, Y+10	; 0x0a
    294a:	b9 84       	ldd	r11, Y+9	; 0x09
    294c:	c8 84       	ldd	r12, Y+8	; 0x08
    294e:	df 80       	ldd	r13, Y+7	; 0x07
    2950:	ee 80       	ldd	r14, Y+6	; 0x06
    2952:	fd 80       	ldd	r15, Y+5	; 0x05
    2954:	0c 81       	ldd	r16, Y+4	; 0x04
    2956:	1b 81       	ldd	r17, Y+3	; 0x03
    2958:	aa 81       	ldd	r26, Y+2	; 0x02
    295a:	b9 81       	ldd	r27, Y+1	; 0x01
    295c:	ce 0f       	add	r28, r30
    295e:	d1 1d       	adc	r29, r1
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
    296a:	ed 01       	movw	r28, r26
    296c:	08 95       	ret

0000296e <itoa>:
    296e:	fb 01       	movw	r30, r22
    2970:	9f 01       	movw	r18, r30
    2972:	e8 94       	clt
    2974:	42 30       	cpi	r20, 0x02	; 2
    2976:	c4 f0       	brlt	.+48     	; 0x29a8 <itoa+0x3a>
    2978:	45 32       	cpi	r20, 0x25	; 37
    297a:	b4 f4       	brge	.+44     	; 0x29a8 <itoa+0x3a>
    297c:	4a 30       	cpi	r20, 0x0A	; 10
    297e:	29 f4       	brne	.+10     	; 0x298a <itoa+0x1c>
    2980:	97 fb       	bst	r25, 7
    2982:	1e f4       	brtc	.+6      	; 0x298a <itoa+0x1c>
    2984:	90 95       	com	r25
    2986:	81 95       	neg	r24
    2988:	9f 4f       	sbci	r25, 0xFF	; 255
    298a:	64 2f       	mov	r22, r20
    298c:	77 27       	eor	r23, r23
    298e:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <__udivmodhi4>
    2992:	80 5d       	subi	r24, 0xD0	; 208
    2994:	8a 33       	cpi	r24, 0x3A	; 58
    2996:	0c f0       	brlt	.+2      	; 0x299a <itoa+0x2c>
    2998:	89 5d       	subi	r24, 0xD9	; 217
    299a:	81 93       	st	Z+, r24
    299c:	cb 01       	movw	r24, r22
    299e:	00 97       	sbiw	r24, 0x00	; 0
    29a0:	a1 f7       	brne	.-24     	; 0x298a <itoa+0x1c>
    29a2:	16 f4       	brtc	.+4      	; 0x29a8 <itoa+0x3a>
    29a4:	5d e2       	ldi	r21, 0x2D	; 45
    29a6:	51 93       	st	Z+, r21
    29a8:	10 82       	st	Z, r1
    29aa:	c9 01       	movw	r24, r18
    29ac:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <strrev>

000029b0 <strrev>:
    29b0:	dc 01       	movw	r26, r24
    29b2:	fc 01       	movw	r30, r24
    29b4:	67 2f       	mov	r22, r23
    29b6:	71 91       	ld	r23, Z+
    29b8:	77 23       	and	r23, r23
    29ba:	e1 f7       	brne	.-8      	; 0x29b4 <strrev+0x4>
    29bc:	32 97       	sbiw	r30, 0x02	; 2
    29be:	04 c0       	rjmp	.+8      	; 0x29c8 <strrev+0x18>
    29c0:	7c 91       	ld	r23, X
    29c2:	6d 93       	st	X+, r22
    29c4:	70 83       	st	Z, r23
    29c6:	62 91       	ld	r22, -Z
    29c8:	ae 17       	cp	r26, r30
    29ca:	bf 07       	cpc	r27, r31
    29cc:	c8 f3       	brcs	.-14     	; 0x29c0 <strrev+0x10>
    29ce:	08 95       	ret

000029d0 <_exit>:
    29d0:	f8 94       	cli

000029d2 <__stop_program>:
    29d2:	ff cf       	rjmp	.-2      	; 0x29d2 <__stop_program>
